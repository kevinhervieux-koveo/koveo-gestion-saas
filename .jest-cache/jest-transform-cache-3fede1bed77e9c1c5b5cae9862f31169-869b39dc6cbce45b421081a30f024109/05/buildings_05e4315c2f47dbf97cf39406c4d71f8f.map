{"file":"/home/runner/workspace/server/api/buildings.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/api/buildings.ts"],"sourcesContent":["import { Express } from 'express';\nimport { db } from '../db';\nimport {\n  buildings,\n  organizations,\n  residences,\n  userResidences,\n  userOrganizations,\n  users,\n  documents,\n} from '@shared/schema';\nimport { eq, and, or, inArray, sql, isNull, count } from 'drizzle-orm';\nimport { requireAuth } from '../auth';\nimport crypto from 'crypto';\n\n/**\n * Handles creating or deleting residences when building totalUnits changes\n */\nasync function handleResidenceChanges(\n  buildingId: string,\n  organizationId: string,\n  newTotalUnits: number,\n  currentResidenceCount: number,\n  totalFloors?: number\n): Promise<void> {\n  try {\n    // Object storage hierarchy will be created automatically when documents are uploaded\n\n    if (newTotalUnits > currentResidenceCount) {\n      // Need to create more residences\n      const residencesToCreate = newTotalUnits - currentResidenceCount;\n\n      // Get existing residence numbers to avoid conflicts\n      const existingResidences = await db\n        .select({ unitNumber: residences.unitNumber })\n        .from(residences)\n        .where(eq(residences.buildingId, buildingId));\n\n      const existingUnitNumbers = new Set(existingResidences.map((r) => r.unitNumber));\n\n      const floors = totalFloors || 1;\n      const unitsPerFloor = Math.ceil(newTotalUnits / floors);\n\n      const newResidences = [];\n      let unitCounter = 1;\n\n      for (let residenceIndex = 0; residenceIndex < residencesToCreate; residenceIndex++) {\n        // Find next available unit number\n        while (existingUnitNumbers.has(unitCounter.toString())) {\n          unitCounter++;\n        }\n\n        const floor = Math.ceil(unitCounter / unitsPerFloor);\n        const unitNumber = unitCounter.toString();\n\n        newResidences.push({\n          buildingId,\n          unitNumber,\n          floor: floor,\n          isActive: true,\n        });\n\n        existingUnitNumbers.add(unitNumber);\n        unitCounter++;\n      }\n\n      // Create residences in batch\n      if (newResidences.length > 0) {\n        const createdResidences = await db.insert(residences).values(newResidences).returning();\n\n        // Create object storage hierarchy for each new residence\n        for (const residence of createdResidences) {\n          try {\n            await objectStorageService.createResidenceHierarchy(\n              organizationId,\n              buildingId,\n              residence.id\n            );\n          } catch (storageError) {\n            console.error(\n              `⚠️ Error creating storage hierarchy for residence ${residence.id}:`,\n              storageError\n            );\n            // Don't fail the whole operation for storage errors\n          }\n        }\n\n        console.log(\n          `✅ Created ${createdResidences.length} new residences for building ${buildingId}`\n        );\n      }\n    } else if (newTotalUnits < currentResidenceCount) {\n      // Need to delete some residences\n      const residencesToDelete = currentResidenceCount - newTotalUnits;\n      console.log(\n        `📉 Marking ${residencesToDelete} residences as inactive for building ${buildingId}`\n      );\n\n      // Get residences that can be safely deleted (no active user relationships)\n      const deletableResidences = await db\n        .select({ id: residences.id, unitNumber: residences.unitNumber })\n        .from(residences)\n        .leftJoin(\n          userResidences,\n          and(eq(userResidences.residenceId, residences.id), eq(userResidences.isActive, true))\n        )\n        .where(\n          and(\n            eq(residences.buildingId, buildingId),\n            eq(residences.isActive, true),\n            isNull(userResidences.id) // No active user relationships\n          )\n        )\n        .orderBy(sql`${residences.unitNumber}::integer DESC`) // Delete highest unit numbers first\n        .limit(residencesToDelete);\n\n      if (deletableResidences.length > 0) {\n        const residenceIdsToDelete = deletableResidences.map((r) => r.id);\n\n        // Soft delete residences (mark as inactive)\n        await db\n          .update(residences)\n          .set({\n            isActive: false,\n            updatedAt: new Date(),\n          })\n          .where(inArray(residences.id, residenceIdsToDelete));\n\n        console.log(\n          `✅ Marked ${deletableResidences.length} residences as inactive for building ${buildingId}`\n        );\n\n        // Log which residences couldn't be deleted due to user relationships\n        const protectedCount = residencesToDelete - deletableResidences.length;\n        if (protectedCount > 0) {\n          console.log(\n            `⚠️ Could not delete ${protectedCount} residences - they have active user relationships`\n          );\n        }\n      } else {\n      }\n    } else {\n      console.log(\n        `✓ No residence changes needed - building ${buildingId} already has ${currentResidenceCount} residences`\n      );\n    }\n    // Don't throw the error to avoid breaking the building update\n  } catch (error: any) {\n    console.error('❌ Error updating residence count:', error);\n    // Don't throw the error to avoid breaking the building update\n  }\n}\n\n/**\n *\n * @param app\n */\n/**\n * RegisterBuildingRoutes function.\n * @param app\n * @returns Function result.\n */\nexport function registerBuildingRoutes(app: Express): void {\n  /**\n   * GET /api/buildings - Retrieves buildings based on user role and organization access.\n   * Used by bills page and other components.\n   *\n   * Access Control Logic:\n   * - Admin: Can see all buildings if they have global access, or buildings in their organizations\n   * - Manager: Can see only buildings in their organizations\n   * - Others: No access to buildings list.\n   */\n  app.get('/api/buildings', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n\n      if (!user) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      // Role-based access control for buildings\n      if (\n        ![\n          'admin',\n          'manager',\n          'demo_manager',\n          'demo_tenant',\n          'demo_resident',\n          'tenant',\n          'resident',\n        ].includes(user.role)\n      ) {\n        return res.status(403).json({\n          message: 'Access denied. Insufficient permissions.',\n          code: 'INSUFFICIENT_PERMISSIONS',\n        });\n      }\n\n      console.log('🏢 [Buildings API] User accessing buildings:', {\n        id: user.id,\n        role: user.role,\n        organizations: user.organizations,\n        canAccessAllOrganizations: user.canAccessAllOrganizations,\n      });\n\n      let buildingsQuery;\n\n      if (user.role === 'admin' && user.canAccessAllOrganizations) {\n        // Admin with global access can see all buildings\n        buildingsQuery = db\n          .select({\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n            city: buildings.city,\n            province: buildings.province,\n            postalCode: buildings.postalCode,\n            buildingType: buildings.buildingType,\n            yearBuilt: buildings.yearBuilt,\n            totalUnits: buildings.totalUnits,\n            totalFloors: buildings.totalFloors,\n            parkingSpaces: buildings.parkingSpaces,\n            storageSpaces: buildings.storageSpaces,\n            organizationId: buildings.organizationId,\n            isActive: buildings.isActive,\n            createdAt: buildings.createdAt,\n            organizationName: organizations.name,\n          })\n          .from(buildings)\n          .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n          .where(eq(buildings.isActive, true))\n          .orderBy(organizations.name, buildings.name);\n      } else {\n        // Manager or admin without global access: only buildings from their organizations\n        console.log(\n          `🔍 [BUILDINGS DEBUG] Taking ELSE path - User ${user.id} organizations:`,\n          user.organizations\n        );\n        if (!user.organizations || user.organizations.length === 0) {\n          console.log(\n            `🔍 [BUILDINGS DEBUG] User ${user.id} has no organizations, checking residence access...`\n          );\n\n          // For tenant/resident roles: Get buildings through their residences\n          if (['tenant', 'resident', 'demo_tenant', 'demo_resident'].includes(user.role)) {\n            const userResidencesList = await db\n              .select({\n                buildingId: residences.buildingId,\n              })\n              .from(userResidences)\n              .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n              .where(and(eq(userResidences.userId, user.id), eq(userResidences.isActive, true)));\n\n            console.log(\n              `🔍 [BUILDINGS DEBUG] Found ${userResidencesList.length} residences for user ${user.id}`\n            );\n\n            if (userResidencesList.length === 0) {\n              return res.json([]); // No residences = no buildings\n            }\n\n            const accessibleBuildingIds = [\n              ...new Set(userResidencesList.map((ur) => ur.buildingId)),\n            ];\n            console.log(`🔍 [BUILDINGS DEBUG] Accessible building IDs:`, accessibleBuildingIds);\n\n            buildingsQuery = db\n              .select({\n                id: buildings.id,\n                name: buildings.name,\n                address: buildings.address,\n                city: buildings.city,\n                province: buildings.province,\n                postalCode: buildings.postalCode,\n                buildingType: buildings.buildingType,\n                yearBuilt: buildings.yearBuilt,\n                totalUnits: buildings.totalUnits,\n                totalFloors: buildings.totalFloors,\n                parkingSpaces: buildings.parkingSpaces,\n                storageSpaces: buildings.storageSpaces,\n                organizationId: buildings.organizationId,\n                isActive: buildings.isActive,\n                createdAt: buildings.createdAt,\n                organizationName: organizations.name,\n              })\n              .from(buildings)\n              .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n              .where(\n                and(eq(buildings.isActive, true), inArray(buildings.id, accessibleBuildingIds))\n              )\n              .orderBy(organizations.name, buildings.name);\n          } else {\n            return res.json([]); // No organizations = no buildings for managers/admins\n          }\n        } else {\n          // User has organizations - use organization-based access\n          buildingsQuery = db\n            .select({\n              id: buildings.id,\n              name: buildings.name,\n              address: buildings.address,\n              city: buildings.city,\n              province: buildings.province,\n              postalCode: buildings.postalCode,\n              buildingType: buildings.buildingType,\n              yearBuilt: buildings.yearBuilt,\n              totalUnits: buildings.totalUnits,\n              totalFloors: buildings.totalFloors,\n              parkingSpaces: buildings.parkingSpaces,\n              storageSpaces: buildings.storageSpaces,\n              organizationId: buildings.organizationId,\n              isActive: buildings.isActive,\n              createdAt: buildings.createdAt,\n              organizationName: organizations.name,\n            })\n            .from(buildings)\n            .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n            .where(\n              and(\n                eq(buildings.isActive, true),\n                inArray(buildings.organizationId, user.organizations)\n              )\n            )\n            .orderBy(organizations.name, buildings.name);\n        }\n      }\n\n      const result = await buildingsQuery;\n\n      res.json(result);\n    } catch (error: any) {\n      console.error('❌ Error fetching buildings:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to fetch buildings',\n      });\n    }\n  });\n\n  /**\n   * GET /api/manager/buildings - Retrieves buildings based on user role and associations.\n   *\n   * Access Control Logic:\n   * - Admin: Can see all buildings in their organization + buildings where they have residences\n   * - Manager: Can see all buildings in their organization + buildings where they have residences\n   * - Resident/Tenant: Can see only buildings where they have residences (role is not used, only residence links).\n   */\n  app.get('/api/manager/buildings', async (req: any, res) => {\n    // Authentication check\n    if (!req.session?.userId && !req.session?.user) {\n      return res.status(401).json({\n        message: 'Authentication required',\n        code: 'AUTH_REQUIRED',\n      });\n    }\n\n    try {\n      // Use session data directly for now\n      let currentUser = req.user || req.session?.user;\n\n      // If we only have userId, we need to fetch the user\n      if (!currentUser && req.session?.userId) {\n        // Import storage from the auth route pattern\n        const { storage } = await import('../storage');\n        currentUser = await storage.getUser(req.session.userId);\n      }\n\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'User not found',\n          code: 'USER_NOT_FOUND',\n        });\n      }\n\n      console.log(\n        `📊 Fetching buildings for user ${currentUser.id} with role ${currentUser.role}`\n      );\n\n      const accessibleBuildings: any[] = [];\n      const buildingIds = new Set<string>();\n\n      // Check if user belongs to Koveo organization (special global access)\n      const userOrgs = await db\n        .select({\n          organizationId: userOrganizations.organizationId,\n          organizationName: organizations.name,\n          canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n        })\n        .from(userOrganizations)\n        .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))\n        .where(\n          and(eq(userOrganizations.userId, currentUser.id), eq(userOrganizations.isActive, true))\n        );\n\n      const hasGlobalAccess =\n        currentUser.role === 'admin' ||\n        userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);\n\n      if (hasGlobalAccess) {\n        console.log(\n          `🌟 Admin user or user with global access detected - granting access to ALL buildings`\n        );\n\n        // Koveo users can see ALL buildings from ALL organizations\n        const allBuildings = await db\n          .select({\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n            city: buildings.city,\n            province: buildings.province,\n            postalCode: buildings.postalCode,\n            buildingType: buildings.buildingType,\n            yearBuilt: buildings.yearBuilt,\n            totalUnits: buildings.totalUnits,\n            totalFloors: buildings.totalFloors,\n            parkingSpaces: buildings.parkingSpaces,\n            storageSpaces: buildings.storageSpaces,\n            amenities: buildings.amenities,\n            managementCompany: buildings.managementCompany,\n            organizationId: buildings.organizationId,\n            isActive: buildings.isActive,\n            createdAt: buildings.createdAt,\n            updatedAt: buildings.updatedAt,\n            organizationName: organizations.name,\n            organizationType: organizations.type,\n          })\n          .from(buildings)\n          .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n          .where(eq(buildings.isActive, true))\n          .orderBy(organizations.name, buildings.name);\n\n        // Add all buildings with special Koveo access type\n        allBuildings.forEach((building) => {\n          if (!buildingIds.has(building.id)) {\n            buildingIds.add(building.id);\n            accessibleBuildings.push({\n              ...building,\n              accessType: 'koveo-global', // Special access type for Koveo users\n            });\n          }\n        });\n      } else {\n        // Regular users: For Admin and Manager roles: Get buildings from their organizations only\n        if (currentUser.role === 'admin' || currentUser.role === 'manager') {\n          if (userOrgs.length > 0) {\n            const orgIds = userOrgs.map((uo) => uo.organizationId);\n\n            // Get all buildings from these organizations only\n            const orgBuildings = await db\n              .select({\n                id: buildings.id,\n                name: buildings.name,\n                address: buildings.address,\n                city: buildings.city,\n                province: buildings.province,\n                postalCode: buildings.postalCode,\n                buildingType: buildings.buildingType,\n                yearBuilt: buildings.yearBuilt,\n                totalUnits: buildings.totalUnits,\n                totalFloors: buildings.totalFloors,\n                parkingSpaces: buildings.parkingSpaces,\n                storageSpaces: buildings.storageSpaces,\n                amenities: buildings.amenities,\n                managementCompany: buildings.managementCompany,\n                organizationId: buildings.organizationId,\n                isActive: buildings.isActive,\n                createdAt: buildings.createdAt,\n                updatedAt: buildings.updatedAt,\n                organizationName: organizations.name,\n                organizationType: organizations.type,\n              })\n              .from(buildings)\n              .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n              .where(and(inArray(buildings.organizationId, orgIds), eq(buildings.isActive, true)));\n\n            orgBuildings.forEach((building) => {\n              if (!buildingIds.has(building.id)) {\n                buildingIds.add(building.id);\n                accessibleBuildings.push({\n                  ...building,\n                  accessType: 'organization', // Track how user has access\n                });\n              }\n            });\n          }\n        }\n      }\n\n      // For ALL roles (Admin, Manager, Resident, Tenant): Get buildings from their residences\n      // This is the many-to-many relationship - users can have residences in different buildings\n      const userResidenceRecords = await db\n        .select({\n          residenceId: userResidences.residenceId,\n          relationshipType: userResidences.relationshipType,\n        })\n        .from(userResidences)\n        .where(and(eq(userResidences.userId, currentUser.id), eq(userResidences.isActive, true)));\n\n      if (userResidenceRecords.length > 0) {\n        const residenceIds = userResidenceRecords.map((ur) => ur.residenceId);\n\n        // Get buildings through residences\n        const residenceBuildings = await db\n          .select({\n            id: buildings.id,\n            name: buildings.name,\n            address: buildings.address,\n            city: buildings.city,\n            province: buildings.province,\n            postalCode: buildings.postalCode,\n            buildingType: buildings.buildingType,\n            yearBuilt: buildings.yearBuilt,\n            totalUnits: buildings.totalUnits,\n            totalFloors: buildings.totalFloors,\n            parkingSpaces: buildings.parkingSpaces,\n            storageSpaces: buildings.storageSpaces,\n            amenities: buildings.amenities,\n            managementCompany: buildings.managementCompany,\n            organizationId: buildings.organizationId,\n            isActive: buildings.isActive,\n            createdAt: buildings.createdAt,\n            updatedAt: buildings.updatedAt,\n            organizationName: organizations.name,\n            organizationType: organizations.type,\n            residenceId: residences.id,\n            unitNumber: residences.unitNumber,\n            floor: residences.floor,\n          })\n          .from(residences)\n          .innerJoin(buildings, eq(residences.buildingId, buildings.id))\n          .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n          .where(and(inArray(residences.id, residenceIds), eq(buildings.isActive, true)));\n\n        // Add residence-based buildings (avoid duplicates)\n        residenceBuildings.forEach((building) => {\n          if (!buildingIds.has(building.id)) {\n            buildingIds.add(building.id);\n            accessibleBuildings.push({\n              id: building.id,\n              name: building.name,\n              address: building.address,\n              city: building.city,\n              province: building.province,\n              postalCode: building.postalCode,\n              buildingType: building.buildingType,\n              yearBuilt: building.yearBuilt,\n              totalUnits: building.totalUnits,\n              totalFloors: building.totalFloors,\n              parkingSpaces: building.parkingSpaces,\n              storageSpaces: building.storageSpaces,\n              amenities: building.amenities,\n              managementCompany: building.managementCompany,\n              organizationId: building.organizationId,\n              isActive: building.isActive,\n              createdAt: building.createdAt,\n              updatedAt: building.updatedAt,\n              organizationName: building.organizationName,\n              organizationType: building.organizationType,\n              accessType: 'residence', // Track how user has access\n              userResidence: {\n                residenceId: building.residenceId,\n                unitNumber: building.unitNumber,\n                floor: building.floor,\n              },\n            });\n          } else {\n            // Building already exists, but we might want to add residence info\n            const existingBuilding = accessibleBuildings.find((b) => b.id === building.id);\n            if (existingBuilding && !existingBuilding.userResidence) {\n              existingBuilding.userResidence = {\n                residenceId: building.residenceId,\n                unitNumber: building.unitNumber,\n                floor: building.floor,\n              };\n              // Update access type if this is from both organization and residence\n              if (existingBuilding.accessType === 'organization') {\n                existingBuilding.accessType = 'both';\n              }\n            }\n          }\n        });\n      }\n\n      // Get statistics for each building\n      const buildingsWithStats = await Promise.all(\n        accessibleBuildings.map(async (building) => {\n          // Get residence count\n          const residenceCount = await db\n            .select({ count: sql<number>`count(*)::int` })\n            .from(residences)\n            .where(and(eq(residences.buildingId, building.id), eq(residences.isActive, true)));\n\n          // Calculate occupancy rate\n          const occupiedUnits = residenceCount[0]?.count || 0;\n          const occupancyRate =\n            building.totalUnits > 0 ? Math.round((occupiedUnits / building.totalUnits) * 100) : 0;\n\n          return {\n            ...building,\n            statistics: {\n              totalUnits: building.totalUnits,\n              occupiedUnits,\n              occupancyRate,\n              vacantUnits: building.totalUnits - occupiedUnits,\n            },\n          };\n        })\n      );\n\n      // Sort buildings by name\n      buildingsWithStats.sort((a, b) => a.name.localeCompare(b.name));\n\n      console.log(\n        `✅ Found ${buildingsWithStats.length} accessible buildings for user ${currentUser.id}`\n      );\n\n      res.json({\n        buildings: buildingsWithStats,\n        meta: {\n          total: buildingsWithStats.length,\n          userRole: currentUser.role,\n          userId: currentUser.id,\n        },\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching manager buildings:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to fetch buildings',\n      });\n    }\n  });\n\n  /**\n   * GET /api/manager/buildings/:id - Get a specific building with detailed information\n   * Uses the same access control logic as the list endpoint.\n   */\n  app.get('/api/manager/buildings/:id', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user;\n      const buildingId = req.params.id;\n\n      if (!currentUser) {\n        return res.status(401).json({\n          _error: 'Unauthorized',\n          message: 'Authentication required',\n        });\n      }\n\n      console.log(\n        `📊 Fetching building ${buildingId} for user ${currentUser.id} with role ${currentUser.role}`\n      );\n\n      let hasAccess = false;\n      let accessType = '';\n\n      // Check if user belongs to Koveo organization (special global access)\n      const userOrgs = await db\n        .select({\n          organizationId: userOrganizations.organizationId,\n          organizationName: organizations.name,\n          canAccessAllOrganizations: userOrganizations.canAccessAllOrganizations,\n        })\n        .from(userOrganizations)\n        .innerJoin(organizations, eq(userOrganizations.organizationId, organizations.id))\n        .where(\n          and(eq(userOrganizations.userId, currentUser.id), eq(userOrganizations.isActive, true))\n        );\n\n      const hasGlobalAccess =\n        currentUser.role === 'admin' ||\n        userOrgs.some((org) => org.organizationName === 'Koveo' || org.canAccessAllOrganizations);\n\n      if (hasGlobalAccess) {\n        hasAccess = true;\n        accessType = 'global';\n      } else {\n        // Check organization-based access for Admin and Manager\n        if (currentUser.role === 'admin' || currentUser.role === 'manager') {\n          if (userOrgs.length > 0) {\n            const orgIds = userOrgs.map((uo) => uo.organizationId);\n\n            // Check if building belongs to user's organizations\n            const buildingOrg = await db\n              .select({ id: buildings.id })\n              .from(buildings)\n              .where(\n                and(\n                  eq(buildings.id, buildingId),\n                  inArray(buildings.organizationId, orgIds),\n                  eq(buildings.isActive, true)\n                )\n              );\n\n            if (buildingOrg.length > 0) {\n              hasAccess = true;\n              accessType = 'organization';\n            }\n          }\n        }\n      }\n\n      // Check residence-based access for all roles\n      if (!hasAccess) {\n        const userResidenceAccess = await db\n          .select({ residenceId: userResidences.residenceId })\n          .from(userResidences)\n          .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n          .where(\n            and(\n              eq(userResidences.userId, currentUser.id),\n              eq(residences.buildingId, buildingId),\n              eq(userResidences.isActive, true)\n            )\n          );\n\n        if (userResidenceAccess.length > 0) {\n          hasAccess = true;\n          accessType = accessType ? 'both' : 'residence';\n        }\n      }\n\n      if (!hasAccess) {\n        return res.status(403).json({\n          _error: 'Forbidden',\n          message: 'You do not have access to this building',\n        });\n      }\n\n      // Get building details\n      const buildingData = await db\n        .select({\n          id: buildings.id,\n          name: buildings.name,\n          address: buildings.address,\n          city: buildings.city,\n          province: buildings.province,\n          postalCode: buildings.postalCode,\n          buildingType: buildings.buildingType,\n          yearBuilt: buildings.yearBuilt,\n          totalUnits: buildings.totalUnits,\n          totalFloors: buildings.totalFloors,\n          parkingSpaces: buildings.parkingSpaces,\n          storageSpaces: buildings.storageSpaces,\n          amenities: buildings.amenities,\n          managementCompany: buildings.managementCompany,\n          organizationId: buildings.organizationId,\n          isActive: buildings.isActive,\n          createdAt: buildings.createdAt,\n          updatedAt: buildings.updatedAt,\n          organizationName: organizations.name,\n          organizationType: organizations.type,\n          organizationAddress: organizations.address,\n          organizationCity: organizations.city,\n          organizationPhone: organizations.phone,\n          organizationEmail: organizations.email,\n        })\n        .from(buildings)\n        .innerJoin(organizations, eq(buildings.organizationId, organizations.id))\n        .where(eq(buildings.id, buildingId));\n\n      if (buildingData.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Building not found',\n        });\n      }\n\n      const building = buildingData[0];\n\n      // Get all residences for this building\n      const buildingResidences = await db\n        .select({\n          id: residences.id,\n          unitNumber: residences.unitNumber,\n          floor: residences.floor,\n          squareFootage: residences.squareFootage,\n          bedrooms: residences.bedrooms,\n          bathrooms: residences.bathrooms,\n          balcony: residences.balcony,\n          parkingSpaceNumbers: residences.parkingSpaceNumbers,\n          storageSpaceNumbers: residences.storageSpaceNumbers,\n          monthlyFees: residences.monthlyFees,\n          isActive: residences.isActive,\n        })\n        .from(residences)\n        .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n      // Get user's residences in this building if any\n      let userResidencesInBuilding: unknown[] = [];\n      const userResidenceRecords = await db\n        .select({\n          residenceId: userResidences.residenceId,\n          relationshipType: userResidences.relationshipType,\n          startDate: userResidences.startDate,\n          endDate: userResidences.endDate,\n        })\n        .from(userResidences)\n        .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n        .where(\n          and(\n            eq(userResidences.userId, currentUser.id),\n            eq(residences.buildingId, buildingId),\n            eq(userResidences.isActive, true)\n          )\n        );\n\n      if (userResidenceRecords.length > 0) {\n        userResidencesInBuilding = userResidenceRecords.map((ur) => {\n          const residence = buildingResidences.find((r) => r.id === ur.residenceId);\n          return {\n            ...residence,\n            relationshipType: ur.relationshipType,\n            startDate: ur.startDate,\n            endDate: ur.endDate,\n          };\n        });\n      }\n\n      // Calculate statistics\n      const occupiedUnits = buildingResidences.length;\n      const occupancyRate =\n        building.totalUnits > 0 ? Math.round((occupiedUnits / building.totalUnits) * 100) : 0;\n\n      res.json({\n        ...building,\n        accessType,\n        statistics: {\n          totalUnits: building.totalUnits,\n          occupiedUnits,\n          occupancyRate,\n          vacantUnits: building.totalUnits - occupiedUnits,\n          totalResidences: buildingResidences.length,\n        },\n        userResidences: userResidencesInBuilding,\n        // Only include full residence list for managers/admins\n        residences:\n          currentUser.role === 'admin' || currentUser.role === 'manager'\n            ? buildingResidences\n            : undefined,\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching building details:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to fetch building details',\n      });\n    }\n  });\n\n  /**\n   * POST /api/admin/buildings - Create a new building (Admin only).\n   */\n  app.post('/api/admin/buildings', requireAuth, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const buildingData = req.body;\n\n      // Validate required fields\n      if (!buildingData.name || !buildingData.organizationId) {\n        return res.status(400).json({\n          _error: 'Validation error',\n          message: 'Building name and organization are required',\n        });\n      }\n\n      // Create building with ID\n      const buildingId = crypto.randomUUID();\n\n      const newBuilding = await db\n        .insert(buildings)\n        .values({\n          id: buildingId,\n          name: buildingData.name,\n          address: buildingData.address || '',\n          city: buildingData.city || '',\n          province: buildingData.province || 'QC',\n          postalCode: buildingData.postalCode || '',\n          buildingType: buildingData.buildingType || 'condo',\n          yearBuilt: buildingData.yearBuilt,\n          totalUnits: buildingData.totalUnits || 0,\n          totalFloors: buildingData.totalFloors,\n          parkingSpaces: buildingData.parkingSpaces,\n          storageSpaces: buildingData.storageSpaces,\n          amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,\n          managementCompany: buildingData.managementCompany,\n          organizationId: buildingData.organizationId,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .returning();\n\n\n      // Building storage hierarchy will be created automatically when documents are uploaded\n      console.log('Building created - storage hierarchy will be created on first document upload');\n\n      // Auto-generate residences if totalUnits is specified and <= 300\n      if (\n        buildingData.totalUnits &&\n        buildingData.totalUnits > 0 &&\n        buildingData.totalUnits <= 300\n      ) {\n        try {\n          const totalUnits = buildingData.totalUnits;\n          const totalFloors = buildingData.totalFloors || 1;\n          const unitsPerFloor = Math.ceil(totalUnits / totalFloors);\n\n          const residencesToCreate = [];\n          for (let unit = 1; unit <= totalUnits; unit++) {\n            const floor = Math.ceil(unit / unitsPerFloor);\n            const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;\n            const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;\n\n            residencesToCreate.push({\n              buildingId: buildingId,\n              unitNumber,\n              floor,\n              isActive: true,\n            });\n          }\n\n          // Insert all residences at once\n          const createdResidences = await db\n            .insert(residences)\n            .values(residencesToCreate)\n            .returning();\n\n          console.log(\n            `✅ Auto-generated ${createdResidences.length} residences for building ${buildingId}`\n          );\n\n          // Create object storage hierarchy for each residence\n          for (const residence of createdResidences) {\n            await objectStorageService.createResidenceHierarchy(\n              buildingData.organizationId,\n              buildingId,\n              residence.id\n            );\n          }\n        } catch (___residenceError) {\n          console.error('⚠️ Error auto-generating residences:', ___residenceError);\n          // Don't fail the building creation if residence generation fails\n        }\n      }\n\n      res.status(201).json({\n        message: 'Building created successfully',\n        building: newBuilding[0],\n      });\n    } catch (error: any) {\n      console.error('❌ Error creating building:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to create building',\n      });\n    }\n  });\n\n  /**\n   * GET /api/buildings/:id/residences-for-deletion - Get list of residences that can be selected for deletion\n   * Only admins can access this endpoint\n   */\n  app.get('/api/buildings/:id/residences-for-deletion', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const buildingId = req.params.id;\n      const maxToSelect = parseInt(req.query.maxToSelect as string) || 10;\n\n      if (!user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // Only admins can delete residences\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Only admins can access residence deletion options' });\n      }\n\n      const { getResidencesForSelection } = await import('./buildings/operations');\n      const residencesToSelect = await getResidencesForSelection(buildingId, maxToSelect);\n\n      res.json({\n        residences: residencesToSelect,\n        message: `Found ${residencesToSelect.length} residences available for deletion`\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching residences for deletion:', error);\n      res.status(500).json({ message: 'Failed to fetch residences for deletion' });\n    }\n  });\n\n  /**\n   * DELETE /api/buildings/:id/residences - Delete selected residences\n   * Only admins can delete residences\n   */\n  app.delete('/api/buildings/:id/residences', requireAuth, async (req: any, res) => {\n    try {\n      const user = req.user;\n      const buildingId = req.params.id;\n      const { residenceIds } = req.body;\n\n      if (!user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // Only admins can delete residences\n      if (user.role !== 'admin') {\n        return res.status(403).json({ message: 'Only admins can delete residences' });\n      }\n\n      if (!Array.isArray(residenceIds) || residenceIds.length === 0) {\n        return res.status(400).json({ message: 'residenceIds array is required' });\n      }\n\n      const { deleteSelectedResidences } = await import('./buildings/operations');\n      const result = await deleteSelectedResidences(buildingId, residenceIds, user.role);\n\n      res.json({\n        success: true,\n        deletedCount: result.deletedCount,\n        documentsDeleted: result.documentsDeleted,\n        message: `Successfully deleted ${result.deletedCount} residences and ${result.documentsDeleted} associated documents`\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting residences:', error);\n      res.status(500).json({ message: error.message || 'Failed to delete residences' });\n    }\n  });\n\n  /**\n   * PUT /api/admin/buildings/:id - Update a building (Admin and Manager).\n   */\n  app.put('/api/admin/buildings/:id', requireAuth, async (req: any, res) => {\n    try {\n      // Check if user is admin or manager\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin' && currentUser.role !== 'manager') {\n        return res.status(403).json({\n          message: 'Admin or Manager access required',\n          code: 'ADMIN_MANAGER_REQUIRED',\n        });\n      }\n\n      const buildingId = req.params.id;\n      const buildingData = req.body;\n\n      // Validate required fields\n      if (!buildingData.name || !buildingData.organizationId) {\n        return res.status(400).json({\n          _error: 'Validation error',\n          message: 'Building name and organization are required',\n        });\n      }\n\n      // Check if building exists\n      const existingBuilding = await db\n        .select()\n        .from(buildings)\n        .where(eq(buildings.id, buildingId))\n        .limit(1);\n\n      if (existingBuilding.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Building not found',\n        });\n      }\n\n      // Check current number of active residences\n      const currentResidences = await db\n        .select({ count: sql<number>`count(*)::int` })\n        .from(residences)\n        .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n      const currentResidenceCount = currentResidences[0]?.count || 0;\n      const newTotalUnits = buildingData.totalUnits || 0;\n      const previousTotalUnits = existingBuilding[0].totalUnits || 0;\n\n      console.log(\n        `🔄 Building ${buildingId}: ${previousTotalUnits} → ${newTotalUnits} units (currently has ${currentResidenceCount} active residences)`\n      );\n\n      // Update building\n      const updatedBuilding = await db\n        .update(buildings)\n        .set({\n          name: buildingData.name,\n          address: buildingData.address || '',\n          city: buildingData.city || '',\n          province: buildingData.province || 'QC',\n          postalCode: buildingData.postalCode || '',\n          buildingType: buildingData.buildingType || 'condo',\n          yearBuilt: buildingData.yearBuilt,\n          totalUnits: newTotalUnits,\n          totalFloors: buildingData.totalFloors,\n          parkingSpaces: buildingData.parkingSpaces,\n          storageSpaces: buildingData.storageSpaces,\n          amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,\n          managementCompany: buildingData.managementCompany,\n          organizationId: buildingData.organizationId,\n          updatedAt: new Date(),\n        })\n        .where(eq(buildings.id, buildingId))\n        .returning();\n\n      // Handle residence count changes with new admin-only functionality\n      if (newTotalUnits !== previousTotalUnits) {\n        console.log(`🏠 Building units changed from ${previousTotalUnits} to ${newTotalUnits}, adjusting residences...`);\n        \n        // Only admins can adjust residence counts\n        if (currentUser.role !== 'admin') {\n          return res.status(403).json({\n            message: 'Only admins can increase or decrease building residence counts',\n            code: 'ADMIN_REQUIRED_FOR_RESIDENCE_CHANGES',\n          });\n        }\n\n        const { adjustResidenceCount } = await import('./buildings/operations');\n        const adjustmentResult = await adjustResidenceCount(\n          buildingId,\n          existingBuilding[0].organizationId,\n          newTotalUnits,\n          previousTotalUnits,\n          buildingData.totalFloors || existingBuilding[0].totalFloors || 1\n        );\n\n        // If residences need to be decreased, return the selection list to user\n        if (adjustmentResult.action === 'decreased' && adjustmentResult.residencesToSelect) {\n          return res.json({\n            message: 'Building updated, but residence count needs to be reduced',\n            buildingUpdated: true,\n            needsResidenceSelection: true,\n            residencesToSelect: adjustmentResult.residencesToSelect,\n            instruction: `Please select ${previousTotalUnits - newTotalUnits} residences to delete from the list provided. Use DELETE /api/buildings/${buildingId}/residences with the selected residence IDs.`\n          });\n        }\n      }\n\n\n      res.json({\n        message: 'Building updated successfully',\n        building: updatedBuilding[0],\n      });\n    } catch (error: any) {\n      console.error('❌ Error updating building:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to update building',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/admin/buildings/:id - Delete a building (Admin only).\n   */\n  app.delete('/api/admin/buildings/:id', requireAuth, async (req: any, res) => {\n    try {\n      // Check if user is admin\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const buildingId = req.params.id;\n\n      // Check if building exists\n      const existingBuilding = await db\n        .select()\n        .from(buildings)\n        .where(eq(buildings.id, buildingId))\n        .limit(1);\n\n      if (existingBuilding.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Building not found',\n        });\n      }\n\n      // Soft delete by setting isActive to false\n      await db\n        .update(buildings)\n        .set({\n          isActive: false,\n          updatedAt: new Date(),\n        })\n        .where(eq(buildings.id, buildingId));\n\n\n      // Object storage cleanup will be handled automatically\n      console.log('Building deleted - storage cleanup will be handled automatically');\n\n      res.json({\n        message: 'Building deleted successfully',\n      });\n    } catch (error: any) {\n      console.error('❌ Error deleting building:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to delete building',\n      });\n    }\n  });\n\n  /**\n   * GET /api/admin/buildings/:id/deletion-impact - Get deletion impact analysis\n   * Shows what will be deleted when removing a building.\n   */\n  app.get('/api/admin/buildings/:id/deletion-impact', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const buildingId = req.params.id;\n\n      // Check if building exists\n      const building = await db\n        .select({ id: buildings.id, name: buildings.name })\n        .from(buildings)\n        .where(and(eq(buildings.id, buildingId), eq(buildings.isActive, true)))\n        .limit(1);\n\n      if (building.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Building not found',\n        });\n      }\n\n      // Count residences in this building\n      const residencesCount = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(residences)\n        .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n      // Count documents associated with this building or its residences\n      const documentsCount = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(documents)\n        .where(\n          or(\n            eq(documents.buildings, buildingId),\n            sql`${documents.residence} IN (SELECT id FROM residences WHERE building_id = ${buildingId})`\n          )\n        );\n\n      // Count users who will become orphaned (only have relationships with residences in this building)\n      const potentialOrphansCount = await db\n        .select({ count: sql<number>`count(distinct ${userResidences.userId})` })\n        .from(userResidences)\n        .innerJoin(residences, eq(userResidences.residenceId, residences.id))\n        .innerJoin(users, eq(userResidences.userId, users.id))\n        .where(\n          and(\n            eq(residences.buildingId, buildingId),\n            eq(residences.isActive, true),\n            eq(userResidences.isActive, true),\n            eq(users.isActive, true)\n          )\n        );\n\n      const impact = {\n        building: building[0],\n        residences: residencesCount[0]?.count || 0,\n        documents: documentsCount[0]?.count || 0,\n        potentialOrphanedUsers: potentialOrphansCount[0]?.count || 0,\n      };\n\n      res.json(impact);\n    } catch (error: any) {\n      console.error('❌ Error analyzing deletion impact:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to analyze deletion impact',\n      });\n    }\n  });\n\n  /**\n   * DELETE /api/admin/buildings/:id/cascade - Cascade delete a building\n   * Replaces the simple delete with cascading delete that removes residences, documents, and orphaned users.\n   */\n  app.delete('/api/admin/buildings/:id/cascade', requireAuth, async (req: any, res) => {\n    try {\n      const currentUser = req.user || req.session?.user;\n      if (!currentUser) {\n        return res.status(401).json({\n          message: 'Authentication required',\n          code: 'AUTH_REQUIRED',\n        });\n      }\n\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({\n          message: 'Admin access required',\n          code: 'ADMIN_REQUIRED',\n        });\n      }\n\n      const buildingId = req.params.id;\n\n      // Check if building exists\n      const building = await db\n        .select({ id: buildings.id, name: buildings.name })\n        .from(buildings)\n        .where(and(eq(buildings.id, buildingId), eq(buildings.isActive, true)))\n        .limit(1);\n\n      if (building.length === 0) {\n        return res.status(404).json({\n          _error: 'Not found',\n          message: 'Building not found',\n        });\n      }\n\n      // Start transaction for cascading delete\n      await db.transaction(async (tx) => {\n        // 1. Get all residences in this building\n        const buildingResidences = await tx\n          .select({ id: residences.id })\n          .from(residences)\n          .where(and(eq(residences.buildingId, buildingId), eq(residences.isActive, true)));\n\n        const residenceIds = buildingResidences.map((r) => r.id);\n\n        if (residenceIds.length > 0) {\n          // 2. Delete documents associated with building or its residences\n          await tx\n            .delete(documents)\n            .where(\n              or(eq(documents.buildings, buildingId), inArray(documents.residence, residenceIds))\n            );\n\n          // 3. Soft delete user-residence relationships\n          await tx\n            .update(userResidences)\n            .set({ isActive: false, updatedAt: new Date() })\n            .where(inArray(userResidences.residenceId, residenceIds));\n\n          // 4. Find and soft delete orphaned users (users who now have no active relationships)\n          const orphanedUsers = await tx\n            .select({ id: users.id })\n            .from(users)\n            .leftJoin(\n              userOrganizations,\n              and(eq(users.id, userOrganizations.userId), eq(userOrganizations.isActive, true))\n            )\n            .leftJoin(\n              userResidences,\n              and(eq(users.id, userResidences.userId), eq(userResidences.isActive, true))\n            )\n            .where(\n              and(\n                eq(users.isActive, true),\n                isNull(userOrganizations.userId),\n                isNull(userResidences.userId)\n              )\n            );\n\n          if (orphanedUsers.length > 0) {\n            const orphanedUserIds = orphanedUsers.map((u) => u.id);\n            await tx\n              .update(users)\n              .set({ isActive: false, updatedAt: new Date() })\n              .where(inArray(users.id, orphanedUserIds));\n          }\n\n          // 5. Soft delete residences\n          await tx\n            .update(residences)\n            .set({ isActive: false, updatedAt: new Date() })\n            .where(inArray(residences.id, residenceIds));\n        } else {\n          // Still delete documents associated directly with the building\n          await tx.delete(documents).where(eq(documents.buildings, buildingId));\n        }\n\n        // 6. Finally, soft delete the building\n        await tx\n          .update(buildings)\n          .set({ isActive: false, updatedAt: new Date() })\n          .where(eq(buildings.id, buildingId));\n      });\n\n\n      // Clean up object storage hierarchy for the deleted building\n      // Get organization ID from building before deletion\n      const buildingOrg = await db\n        .select({ organizationId: buildings.organizationId })\n        .from(buildings)\n        .where(eq(buildings.id, buildingId))\n        .limit(1);\n\n      if (buildingOrg.length > 0) {\n        // Object storage cleanup will be handled automatically\n        console.log('Building deleted - storage cleanup will be handled automatically');\n      }\n\n      res.json({\n        message: 'Building and related entities deleted successfully',\n        deletedBuilding: building[0].name,\n      });\n    } catch (error: any) {\n      console.error('❌ Error during cascade delete:', error);\n      res.status(500).json({\n        _error: 'Internal server error',\n        message: 'Failed to delete building and related entities',\n      });\n    }\n  });\n}\n"],"version":3}