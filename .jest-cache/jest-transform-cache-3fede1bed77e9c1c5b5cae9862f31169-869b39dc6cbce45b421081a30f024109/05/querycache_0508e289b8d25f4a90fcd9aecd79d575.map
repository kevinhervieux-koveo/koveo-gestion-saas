{"file":"/home/runner/workspace/server/query-cache.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/server/query-cache.ts"],"sourcesContent":["/**\n * Query caching system for Quebec property management SaaS.\n * Implements intelligent caching to reduce 132ms average query time.\n */\n\nimport { LRUCache } from 'lru-cache';\n\n/**\n * Cache configuration for different types of queries.\n */\ninterface CacheConfig {\n  maxSize: number;\n  ttl: number; // Time to live in milliseconds\n}\n\n/**\n * Cache configurations optimized for property management workloads.\n */\nconst CACHE_CONFIGS: Record<string, CacheConfig> = {\n  // User data - frequently accessed, moderate changes\n  users: { maxSize: 1000, ttl: 5 * 60 * 1000 }, // 5 minutes\n\n  // Organization data - stable, infrequent changes\n  organizations: { maxSize: 100, ttl: 30 * 60 * 1000 }, // 30 minutes\n\n  // Building data - relatively stable\n  buildings: { maxSize: 500, ttl: 15 * 60 * 1000 }, // 15 minutes\n\n  // Residence data - stable structure, occasional updates\n  residences: { maxSize: 2000, ttl: 10 * 60 * 1000 }, // 10 minutes\n\n  // Bills - time-sensitive, frequent updates\n  bills: { maxSize: 1000, ttl: 2 * 60 * 1000 }, // 2 minutes\n\n  // Maintenance requests - dynamic, frequent status changes\n  maintenance: { maxSize: 500, ttl: 1 * 60 * 1000 }, // 1 minute\n\n  // Notifications - real-time, short cache\n  notifications: { maxSize: 500, ttl: 30 * 1000 }, // 30 seconds\n\n  // Quality metrics - stable for periods\n  metrics: { maxSize: 200, ttl: 5 * 60 * 1000 }, // 5 minutes\n\n  // Features and roadmap - moderately stable\n  features: { maxSize: 300, ttl: 3 * 60 * 1000 }, // 3 minutes\n\n  // Framework configuration - very stable\n  config: { maxSize: 100, ttl: 60 * 60 * 1000 }, // 1 hour\n\n  // Bug reports - moderate changes, user-specific\n  bugs: { maxSize: 500, ttl: 2 * 60 * 1000 }, // 2 minutes\n};\n\n/**\n * Cache instances for different data types.\n */\nclass QueryCacheManager {\n  private caches: Map<string, LRUCache<string, any>> = new Map();\n  private hitCounts: Map<string, number> = new Map();\n  private missCounts: Map<string, number> = new Map();\n\n  /**\n   *\n   */\n  constructor() {\n    // Initialize caches for each data type\n    Object.entries(CACHE_CONFIGS).forEach(([type, config]) => {\n      this.caches.set(\n        type,\n        new LRUCache({\n          max: config.maxSize,\n          ttl: config.ttl,\n          updateAgeOnGet: true,\n          updateAgeOnHas: true,\n        })\n      );\n      this.hitCounts.set(type, 0);\n      this.missCounts.set(type, 0);\n    });\n  }\n\n  /**\n   * Gets cached data if available.\n   * @param cacheType Type of cache (users, buildings, etc.).\n   * @param key Cache key.\n   * @param _key\n   * @returns Cached data or undefined.\n   */\n  get<T>(cacheType: string, _key: string): T | undefined {\n    const cache = this.caches.get(cacheType);\n    if (!cache) {\n      return undefined;\n    }\n\n    const result = cache.get(_key);\n    if (result !== undefined) {\n      this.hitCounts.set(cacheType, (this.hitCounts.get(cacheType) || 0) + 1);\n      return result;\n    }\n\n    this.missCounts.set(cacheType, (this.missCounts.get(cacheType) || 0) + 1);\n    return undefined;\n  }\n\n  /**\n   * Stores data in cache.\n   * @param cacheType Type of cache.\n   * @param key Cache key.\n   * @param data Data to cache.\n   * @param _key\n   * @param _data\n   */\n  set<T>(cacheType: string, _key: string, _data: T): void {\n    const cache = this.caches.get(cacheType);\n    if (!cache) {\n      return;\n    }\n\n    cache.set(_key, _data);\n  }\n\n  /**\n   * Invalidates cache entries by pattern.\n   * @param cacheType Type of cache.\n   * @param pattern Key pattern to invalidate (supports wildcards).\n   */\n  invalidate(cacheType: string, pattern?: string): void {\n    const cache = this.caches.get(cacheType);\n    if (!cache) {\n      return;\n    }\n\n    if (pattern) {\n      // Remove entries matching pattern\n      for (const key of cache.keys()) {\n        if (this.matchesPattern(key, pattern)) {\n          cache.delete(key);\n        }\n      }\n    } else {\n      // Clear entire cache\n      cache.clear();\n    }\n  }\n\n  /**\n   * Gets cache performance statistics.\n   */\n  getStats(): Record<string, any> {\n    const stats: Record<string, any> = {};\n\n    for (const [_type, cache] of this.caches) {\n      const hits = this.hitCounts.get(_type) || 0;\n      const misses = this.missCounts.get(_type) || 0;\n      const total = hits + misses;\n      const hitRate = total > 0 ? ((hits / total) * 100).toFixed(2) : '0.00';\n\n      stats[_type] = {\n        size: cache.size,\n        maxSize: cache.max,\n        hits,\n        misses,\n        hitRate: `${hitRate}%`,\n        memoryUsage: this.estimateMemoryUsage(cache),\n      };\n    }\n\n    return stats;\n  }\n\n  /**\n   * Clears all caches.\n   */\n  clearAll(): void {\n    for (const [_type, cache] of this.caches) {\n      cache.clear();\n      this.hitCounts.set(_type, 0);\n      this.missCounts.set(_type, 0);\n    }\n  }\n\n  /**\n   * Pattern matching for cache key invalidation.\n   * @param key\n   * @param _key\n   * @param pattern\n   */\n  private matchesPattern(_key: string, pattern: string): boolean {\n    const regex = new RegExp(pattern.replace(/\\*/g, '.*'));\n    return regex.test(_key);\n  }\n\n  /**\n   * Estimates memory usage of a cache.\n   * @param cache\n   */\n  private estimateMemoryUsage(cache: LRUCache<string, any>): string {\n    let totalSize = 0;\n    for (const value of cache.values()) {\n      totalSize += JSON.stringify(value).length * 2; // Rough estimate\n    }\n    return `${(totalSize / 1024).toFixed(2)} KB`;\n  }\n}\n\n/**\n * Global cache manager instance.\n */\nexport const queryCache = new QueryCacheManager();\n\n/**\n * Cached query helper function for database operations.\n * Replaces decorator approach for better compatibility.\n * @param cacheType\n * @param cacheKey\n * @param operation\n */\n/**\n * WithCache function.\n * @param cacheType\n * @param cacheKey\n * @param operation\n * @returns Function result.\n */\nexport function withCache<T>(\n  cacheType: string,\n  cacheKey: string,\n  operation: () => Promise<T>\n): Promise<T> {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // Try to get from cache first\n      const cached = queryCache.get<T>(cacheType, cacheKey);\n      if (cached !== undefined) {\n        resolve(cached);\n        return;\n      }\n\n      // Execute operation\n      const result = await operation();\n\n      // Cache the result\n      queryCache.set(cacheType, cacheKey, result);\n\n      resolve(result);\n    } catch (error: any) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * Cache invalidation utilities for specific operations.\n */\nexport class CacheInvalidator {\n  /**\n   * Invalidates user-related caches when user data changes.\n   * @param userId\n   */\n  static invalidateUserCaches(userId: string): void {\n    queryCache.invalidate('users', `user:${userId}*`);\n    queryCache.invalidate('residences', `user_residences:${userId}*`);\n    queryCache.invalidate('notifications', `user_notifications:${userId}*`);\n  }\n\n  /**\n   * Invalidates building-related caches when building data changes.\n   * @param buildingId\n   */\n  static invalidateBuildingCaches(buildingId: string): void {\n    queryCache.invalidate('buildings', `building:${buildingId}*`);\n    queryCache.invalidate('residences', `building_residences:${buildingId}*`);\n    queryCache.invalidate('budgets', `building_budgets:${buildingId}*`);\n  }\n\n  /**\n   * Invalidates residence-related caches when residence data changes.\n   * @param residenceId\n   */\n  static invalidateResidenceCaches(residenceId: string): void {\n    queryCache.invalidate('residences', `residence:${residenceId}*`);\n    queryCache.invalidate('bills', `residence_bills:${residenceId}*`);\n    queryCache.invalidate('maintenance', `residence_maintenance:${residenceId}*`);\n  }\n\n  /**\n   * Invalidates all caches (use sparingly).\n   */\n  static invalidateAll(): void {\n    queryCache.clearAll();\n  }\n}\n\n/**\n * Performance monitoring for cache effectiveness.\n */\nexport class CacheMonitor {\n  /**\n   * Logs cache performance statistics.\n   */\n  static logPerformanceStats(): void {\n    const stats = queryCache.getStats();\n    console.table(stats);\n  }\n\n  /**\n   * Monitors cache hit rates and suggests optimizations.\n   */\n  static analyzePerformance(): string[] {\n    const stats = queryCache.getStats();\n    const suggestions: string[] = [];\n\n    Object.entries(stats).forEach(([cacheType, stat]) => {\n      const hitRate = parseFloat(stat.hitRate.replace('%', ''));\n\n      if (hitRate < 50) {\n        suggestions.push(\n          `Low hit rate for ${cacheType} cache (${stat.hitRate}). Consider increasing TTL or cache size.`\n        );\n      }\n\n      if (stat.size === stat.maxSize) {\n        suggestions.push(\n          `${cacheType} cache is at maximum capacity. Consider increasing max size.`\n        );\n      }\n    });\n\n    return suggestions;\n  }\n\n  /**\n   * Gets memory usage summary for all caches.\n   */\n  static getMemoryUsage(): string {\n    const stats = queryCache.getStats();\n    let totalMemory = 0;\n\n    Object.values(stats).forEach((stat: any) => {\n      totalMemory += parseFloat(stat.memoryUsage.replace(' KB', ''));\n    });\n\n    return `${totalMemory.toFixed(2)} KB`;\n  }\n}\n\n/**\n * Automatic cache warming for frequently accessed data.\n */\nexport class CacheWarmer {\n  /**\n   * Warms up caches with frequently accessed data.\n   */\n  static async warmCaches(): Promise<void> {\n\n    try {\n      // This would be implemented with actual database calls\n      // Example: Pre-load active users, organizations, etc.\n    } catch (error: any) {\n      console.error('❌ Error warming caches:', error);\n    }\n  }\n}\n\n/**\n * Export cache utilities for easy access.\n */\nexport { queryCache as default, QueryCacheManager, CACHE_CONFIGS };\n"],"version":3}