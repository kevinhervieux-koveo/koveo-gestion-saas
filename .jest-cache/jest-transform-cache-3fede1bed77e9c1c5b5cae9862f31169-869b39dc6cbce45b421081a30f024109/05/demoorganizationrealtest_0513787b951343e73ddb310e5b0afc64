276d8cf8a82a3c5a93c707d6472d1e8a
"use strict";
/**
 * Demo Organization Integration Tests with Real Data
 * Tests API endpoints using actual demo organization data from the database
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const routes_1 = require("../../server/routes");
// Create a simple test server
const createTestApp = () => {
    const app = (0, express_1.default)();
    app.use(express_1.default.json());
    app.use(express_1.default.urlencoded({ extended: true }));
    // Register all routes
    (0, routes_1.registerRoutes)(app);
    return app;
};
(0, globals_1.describe)('Demo Organization Integration Tests with Real Data', () => {
    let app;
    (0, globals_1.beforeAll)(async () => {
        app = createTestApp();
    });
    (0, globals_1.describe)('Organization API Endpoints', () => {
        (0, globals_1.it)('should fetch organizations successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/organizations')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            // Should return some data or handle authentication properly
            (0, globals_1.expect)([200, 401, 403].includes(response.status)).toBe(true);
        });
        (0, globals_1.it)('should handle demo organization queries', async () => {
            // Use dynamic lookup instead of hardcoded ID to avoid conflicts
            const response = await (0, supertest_1.default)(app)
                .get('/api/demo/users')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            // Should return demo users or handle properly (doesn't modify data)
            (0, globals_1.expect)([200, 401, 403, 404].includes(response.status)).toBe(true);
        });
    });
    (0, globals_1.describe)('Buildings API Endpoints', () => {
        (0, globals_1.it)('should fetch buildings successfully', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/buildings')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            (0, globals_1.expect)([200, 401, 403].includes(response.status)).toBe(true);
        });
        (0, globals_1.it)('should handle specific building queries', async () => {
            const buildingId = 'd084392f-facb-40a6-8685-3b40dcdd4b68'; // Koveo Tower
            const response = await (0, supertest_1.default)(app)
                .get(`/api/buildings/${buildingId}`)
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            (0, globals_1.expect)([200, 401, 403, 404].includes(response.status)).toBe(true);
        });
    });
    (0, globals_1.describe)('Users API Endpoints', () => {
        (0, globals_1.it)('should handle user authentication endpoints', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/users/me')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            // Should either return user data or require authentication
            (0, globals_1.expect)([200, 401, 403].includes(response.status)).toBe(true);
        });
    });
    (0, globals_1.describe)('Health Check Endpoints', () => {
        (0, globals_1.it)('should respond to health check', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThanOrEqual(200);
            });
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.body).toHaveProperty('status');
        });
        (0, globals_1.it)('should respond to status check', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/health')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThanOrEqual(200);
            });
            (0, globals_1.expect)([200, 503].includes(response.status)).toBe(true);
        });
    });
    (0, globals_1.describe)('Demo Data Validation', () => {
        (0, globals_1.it)('should validate demo users exist', async () => {
            // Test that demo users can be queried
            const demoUserEmail = 'emma.cote@demo.com';
            // Try to get user info - should handle appropriately
            const response = await (0, supertest_1.default)(app)
                .get('/api/users')
                .query({ email: demoUserEmail })
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            (0, globals_1.expect)([200, 401, 403, 404].includes(response.status)).toBe(true);
        });
        (0, globals_1.it)('should validate demo organization structure', async () => {
            // Verify that demo organization endpoints are accessible
            const response = await (0, supertest_1.default)(app)
                .get('/api/organizations')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            (0, globals_1.expect)([200, 401, 403].includes(response.status)).toBe(true);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle invalid routes gracefully', async () => {
            const response = await (0, supertest_1.default)(app)
                .get('/api/nonexistent')
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeGreaterThanOrEqual(404);
            });
            (0, globals_1.expect)(response.status).toBe(404);
        });
        (0, globals_1.it)('should handle malformed requests', async () => {
            const response = await (0, supertest_1.default)(app)
                .post('/api/organizations')
                .send({ invalid: 'data' })
                .expect((res) => {
                (0, globals_1.expect)(res.status).toBeLessThan(500);
            });
            // Should reject with 400/401/403 but not crash
            (0, globals_1.expect)([400, 401, 403, 422].includes(response.status)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,