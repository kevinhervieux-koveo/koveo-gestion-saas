{"file":"/home/runner/workspace/tests/unit/bills-validation.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/unit/bills-validation.test.ts"],"sourcesContent":["import { describe, it, expect } from '@jest/globals';\nimport { z } from 'zod';\n\n// Bill validation schemas (would normally be imported from the API)\nconst billCategorySchema = z.enum([\n  'insurance',\n  'maintenance',\n  'salary',\n  'utilities',\n  'cleaning',\n  'security',\n  'landscaping',\n  'professional_services',\n  'administration',\n  'repairs',\n  'supplies',\n  'taxes',\n  'other',\n]);\n\nconst paymentTypeSchema = z.enum(['unique', 'recurrent']);\n\nconst schedulePaymentSchema = z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']);\n\nconst billStatusSchema = z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']);\n\nconst createBillSchema = z.object({\n  buildingId: z.string().uuid(),\n  title: z.string().min(1),\n  description: z.string().optional(),\n  category: billCategorySchema,\n  vendor: z.string().optional(),\n  paymentType: paymentTypeSchema,\n  schedulePayment: schedulePaymentSchema.optional(),\n  scheduleCustom: z.array(z.string()).optional(),\n  costs: z.array(z.number().positive()).min(1),\n  totalAmount: z.number().positive(),\n  startDate: z.string(),\n  endDate: z.string().optional(),\n  status: billStatusSchema.optional(),\n  notes: z.string().optional(),\n});\n\nconst billFilterSchema = z.object({\n  buildingId: z.string().uuid(),\n  category: z.string().optional(),\n  year: z.string().optional(),\n  status: billStatusSchema.optional(),\n});\n\ndescribe('Bills Validation Tests', () => {\n  describe('Bill Category Validation', () => {\n    it('should accept all valid bill categories', () => {\n      const validCategories = [\n        'insurance',\n        'maintenance',\n        'salary',\n        'utilities',\n        'cleaning',\n        'security',\n        'landscaping',\n        'professional_services',\n        'administration',\n        'repairs',\n        'supplies',\n        'taxes',\n        'other',\n      ];\n\n      validCategories.forEach((category) => {\n        const result = billCategorySchema.safeParse(category);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data).toBe(category);\n        }\n      });\n    });\n\n    it('should reject invalid bill categories', () => {\n      const invalidCategories = [\n        'invalid_category',\n        'INSURANCE', // wrong case\n        'misc',\n        '',\n        null,\n        undefined,\n        123,\n      ];\n\n      invalidCategories.forEach((category) => {\n        const result = billCategorySchema.safeParse(category);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Payment Type Validation', () => {\n    it('should accept valid payment types', () => {\n      const validTypes = ['unique', 'recurrent'];\n\n      validTypes.forEach((type) => {\n        const result = paymentTypeSchema.safeParse(type);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data).toBe(type);\n        }\n      });\n    });\n\n    it('should reject invalid payment types', () => {\n      const invalidTypes = ['one_time', 'recurring', 'UNIQUE', '', null, undefined];\n\n      invalidTypes.forEach((type) => {\n        const result = paymentTypeSchema.safeParse(type);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Schedule Payment Validation', () => {\n    it('should accept valid schedule payment options', () => {\n      const validSchedules = ['weekly', 'monthly', 'quarterly', 'yearly', 'custom'];\n\n      validSchedules.forEach((schedule) => {\n        const result = schedulePaymentSchema.safeParse(schedule);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data).toBe(schedule);\n        }\n      });\n    });\n\n    it('should reject invalid schedule payment options', () => {\n      const invalidSchedules = ['daily', 'biweekly', 'annually', 'MONTHLY', '', null];\n\n      invalidSchedules.forEach((schedule) => {\n        const result = schedulePaymentSchema.safeParse(schedule);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Bill Status Validation', () => {\n    it('should accept valid bill statuses', () => {\n      const validStatuses = ['draft', 'sent', 'overdue', 'paid', 'cancelled'];\n\n      validStatuses.forEach((status) => {\n        const result = billStatusSchema.safeParse(status);\n        expect(result.success).toBe(true);\n        if (result.success) {\n          expect(result.data).toBe(status);\n        }\n      });\n    });\n\n    it('should reject invalid bill statuses', () => {\n      const invalidStatuses = ['pending', 'completed', 'PAID', 'active', '', null];\n\n      invalidStatuses.forEach((status) => {\n        const result = billStatusSchema.safeParse(status);\n        expect(result.success).toBe(false);\n      });\n    });\n  });\n\n  describe('Create Bill Schema Validation', () => {\n    const validBillData = {\n      buildingId: '123e4567-e89b-12d3-a456-426614174000',\n      title: 'Test Bill',\n      description: 'Test description',\n      category: 'maintenance' as const,\n      vendor: 'Test Vendor',\n      paymentType: 'unique' as const,\n      costs: [100.5],\n      totalAmount: 100.5,\n      startDate: '2024-01-01',\n      status: 'draft' as const,\n    };\n\n    it('should accept valid bill data', () => {\n      const result = createBillSchema.safeParse(validBillData);\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.title).toBe('Test Bill');\n        expect(result.data.category).toBe('maintenance');\n      }\n    });\n\n    it('should require buildingId to be a valid UUID', () => {\n      const invalidData = { ...validBillData, buildingId: 'invalid-uuid' };\n      const result = createBillSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should require title to be non-empty', () => {\n      const invalidData = { ...validBillData, title: '' };\n      const result = createBillSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should require costs to be positive numbers', () => {\n      const invalidData = { ...validBillData, costs: [-100, 0] };\n      const result = createBillSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should require totalAmount to be positive', () => {\n      const invalidData = { ...validBillData, totalAmount: -100 };\n      const result = createBillSchema.safeParse(invalidData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should accept optional fields', () => {\n      const minimalData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        title: 'Minimal Bill',\n        category: 'other' as const,\n        paymentType: 'unique' as const,\n        costs: [50],\n        totalAmount: 50,\n        startDate: '2024-01-01',\n      };\n\n      const result = createBillSchema.safeParse(minimalData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate recurrent bill with schedule', () => {\n      const recurrentData = {\n        ...validBillData,\n        paymentType: 'recurrent' as const,\n        schedulePayment: 'monthly' as const,\n        endDate: '2024-12-31',\n      };\n\n      const result = createBillSchema.safeParse(recurrentData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate custom schedule with dates array', () => {\n      const customData = {\n        ...validBillData,\n        paymentType: 'recurrent' as const,\n        schedulePayment: 'custom' as const,\n        scheduleCustom: ['2024-01-15', '2024-04-15', '2024-07-15', '2024-10-15'],\n      };\n\n      const result = createBillSchema.safeParse(customData);\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('Bill Filter Schema Validation', () => {\n    it('should accept valid filter data', () => {\n      const validFilters = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        category: 'insurance',\n        year: '2024',\n        status: 'paid' as const,\n      };\n\n      const result = billFilterSchema.safeParse(validFilters);\n      expect(result.success).toBe(true);\n    });\n\n    it('should require buildingId to be UUID', () => {\n      const invalidFilters = {\n        buildingId: 'invalid-uuid',\n        category: 'insurance',\n      };\n\n      const result = billFilterSchema.safeParse(invalidFilters);\n      expect(result.success).toBe(false);\n    });\n\n    it('should accept minimal filter with only buildingId', () => {\n      const minimalFilters = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n      };\n\n      const result = billFilterSchema.safeParse(minimalFilters);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject invalid status in filters', () => {\n      const invalidFilters = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        status: 'invalid_status',\n      };\n\n      const result = billFilterSchema.safeParse(invalidFilters);\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('Edge Cases and Data Integrity', () => {\n    it('should handle very large cost amounts', () => {\n      const largeCostData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        title: 'Large Cost Bill',\n        category: 'other' as const,\n        paymentType: 'unique' as const,\n        costs: [999999.99],\n        totalAmount: 999999.99,\n        startDate: '2024-01-01',\n      };\n\n      const result = createBillSchema.safeParse(largeCostData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should handle multiple costs in array', () => {\n      const multiCostData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        title: 'Multi-Cost Bill',\n        category: 'maintenance' as const,\n        paymentType: 'recurrent' as const,\n        schedulePayment: 'quarterly' as const,\n        costs: [500, 600, 700, 800],\n        totalAmount: 2600,\n        startDate: '2024-01-01',\n      };\n\n      const result = createBillSchema.safeParse(multiCostData);\n      expect(result.success).toBe(true);\n    });\n\n    it('should reject empty costs array', () => {\n      const emptyCostsData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        title: 'Empty Costs Bill',\n        category: 'other' as const,\n        paymentType: 'unique' as const,\n        costs: [],\n        totalAmount: 100,\n        startDate: '2024-01-01',\n      };\n\n      const result = createBillSchema.safeParse(emptyCostsData);\n      expect(result.success).toBe(false);\n    });\n\n    it('should handle very long title and description', () => {\n      const longTextData = {\n        buildingId: '123e4567-e89b-12d3-a456-426614174000',\n        title: 'A'.repeat(1000), // Very long title\n        description: 'B'.repeat(5000), // Very long description\n        category: 'other' as const,\n        paymentType: 'unique' as const,\n        costs: [100],\n        totalAmount: 100,\n        startDate: '2024-01-01',\n      };\n\n      const result = createBillSchema.safeParse(longTextData);\n      expect(result.success).toBe(true); // Schema doesn't enforce max length currently\n    });\n  });\n});\n"],"version":3}