04264903d9b7322444cae5a22479229b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBuilding = createBuilding;
exports.adjustResidenceCount = adjustResidenceCount;
exports.addResidencesAutomatically = addResidencesAutomatically;
exports.getResidencesForSelection = getResidencesForSelection;
exports.deleteSelectedResidences = deleteSelectedResidences;
exports.updateBuilding = updateBuilding;
exports.deleteBuilding = deleteBuilding;
exports.cascadeDeleteBuilding = cascadeDeleteBuilding;
exports.buildingExists = buildingExists;
const db_1 = require("../../db");
const schema_1 = require("@shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const crypto_1 = __importDefault(require("crypto"));
/**
 * Creates a new building with auto-generated residences.
 * @param buildingData
 */
/**
 * CreateBuilding function.
 * @param buildingData
 * @returns Function result.
 */
async function createBuilding(buildingData) {
    const buildingId = crypto_1.default.randomUUID();
    const newBuilding = await db_1.db
        .insert(schema_1.buildings)
        .values({
        name: buildingData.name,
        address: buildingData.address || '',
        city: buildingData.city || '',
        province: buildingData.province || 'QC',
        postalCode: buildingData.postalCode || '',
        buildingType: buildingData.buildingType || 'condo',
        yearBuilt: buildingData.yearBuilt,
        totalUnits: buildingData.totalUnits || 0,
        totalFloors: buildingData.totalFloors,
        parkingSpaces: buildingData.parkingSpaces,
        storageSpaces: buildingData.storageSpaces,
        amenities: buildingData.amenities,
        managementCompany: buildingData.managementCompany,
        organizationId: buildingData.organizationId,
        isActive: true,
    })
        .returning();
    // Auto-generate residences if totalUnits is specified and <= 300
    if (buildingData.totalUnits && buildingData.totalUnits > 0 && buildingData.totalUnits <= 300) {
        try {
            const totalUnits = buildingData.totalUnits;
            const totalFloors = buildingData.totalFloors || 1;
            const unitsPerFloor = Math.ceil(totalUnits / totalFloors);
            const residencesToCreate = [];
            for (let unit = 1; unit <= totalUnits; unit++) {
                const floor = Math.ceil(unit / unitsPerFloor);
                const unitOnFloor = ((unit - 1) % unitsPerFloor) + 1;
                const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;
                residencesToCreate.push({
                    buildingId: newBuilding[0].id,
                    unitNumber,
                    floor,
                    isActive: true,
                });
            }
            // Insert all residences at once
            const createdResidences = await db_1.db.insert(schema_1.residences).values(residencesToCreate).returning();
        }
        catch (___residenceError) {
            console.error('‚ö†Ô∏è Error auto-generating residences:', ___residenceError);
            // Don't fail the building creation if residence generation fails
        }
    }
    return newBuilding[0];
}
/**
 * Updates a building.
 * @param buildingId
 * @param buildingData
 */
/**
 * UpdateBuilding function.
 * @param buildingId
 * @param buildingData
 * @returns Function result.
 */
/**
 * Adjusts residence count when building totalUnits changes.
 * For increases: Auto-generates residences with names like 'unit 109'
 * For decreases: Returns list of deletable residences for user selection
 */
async function adjustResidenceCount(buildingId, organizationId, newTotalUnits, currentTotalUnits, totalFloors) {
    // Get current active residence count
    const currentActiveResidences = await db_1.db
        .select({ id: schema_1.residences.id, unitNumber: schema_1.residences.unitNumber })
        .from(schema_1.residences)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
    const currentActiveCount = currentActiveResidences.length;
    if (newTotalUnits > currentActiveCount) {
        // Need to add residences - do it automatically
        await addResidencesAutomatically(buildingId, newTotalUnits - currentActiveCount, totalFloors, currentActiveResidences);
        return { action: 'increased' };
    }
    else if (newTotalUnits < currentActiveCount) {
        // Need to reduce residences - return list for user selection
        const deletableResidences = await getResidencesForSelection(buildingId, currentActiveCount - newTotalUnits);
        return { action: 'decreased', residencesToSelect: deletableResidences };
    }
    return { action: 'none' };
}
/**
 * Automatically adds residences when building count increases
 */
async function addResidencesAutomatically(buildingId, residencesToAdd, totalFloors, existingResidences) {
    const existingUnitNumbers = new Set(existingResidences.map(r => r.unitNumber));
    const unitsPerFloor = Math.ceil((existingResidences.length + residencesToAdd) / totalFloors);
    const residencesToCreate = [];
    let unitCounter = 1;
    let created = 0;
    // Find available unit numbers and create residences
    while (created < residencesToAdd) {
        const floor = Math.ceil(unitCounter / unitsPerFloor);
        const unitOnFloor = ((unitCounter - 1) % unitsPerFloor) + 1;
        const unitNumber = `${floor}${unitOnFloor.toString().padStart(2, '0')}`;
        if (!existingUnitNumbers.has(unitNumber)) {
            residencesToCreate.push({
                buildingId,
                unitNumber,
                floor,
                isActive: true,
            });
            existingUnitNumbers.add(unitNumber);
            created++;
        }
        unitCounter++;
    }
    if (residencesToCreate.length > 0) {
        await db_1.db.insert(schema_1.residences).values(residencesToCreate);
        console.log(`‚úÖ Auto-created ${residencesToCreate.length} residences for building ${buildingId}`);
    }
}
/**
 * Gets list of residences that can be selected for deletion
 * Returns residences with metadata about documents and users
 */
async function getResidencesForSelection(buildingId, maxToSelect) {
    const allActiveResidences = await db_1.db
        .select({
        id: schema_1.residences.id,
        unitNumber: schema_1.residences.unitNumber,
        floor: schema_1.residences.floor
    })
        .from(schema_1.residences)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)))
        .orderBy(schema_1.residences.unitNumber);
    // Check each residence for documents and user relationships
    const residenceDetails = await Promise.all(allActiveResidences.map(async (residence) => {
        // Check for documents
        const docs = await db_1.db
            .select({ id: schema_1.documents.id })
            .from(schema_1.documents)
            .where((0, drizzle_orm_1.eq)(schema_1.documents.residenceId, residence.id))
            .limit(1);
        // Check for active user relationships
        const userRels = await db_1.db
            .select({ id: schema_1.userResidences.id })
            .from(schema_1.userResidences)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.userResidences.residenceId, residence.id), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)))
            .limit(1);
        return {
            id: residence.id,
            unitNumber: residence.unitNumber,
            hasDocuments: docs.length > 0,
            hasUsers: userRels.length > 0,
        };
    }));
    // Prioritize empty residences first (no documents or users)
    return residenceDetails.sort((a, b) => {
        const aScore = (a.hasDocuments ? 1 : 0) + (a.hasUsers ? 1 : 0);
        const bScore = (b.hasDocuments ? 1 : 0) + (b.hasUsers ? 1 : 0);
        return aScore - bScore; // Empty residences first
    });
}
/**
 * Deletes selected residences and their related documents
 * Only admins can call this function
 */
async function deleteSelectedResidences(buildingId, residenceIds, userRole) {
    if (userRole !== 'admin') {
        throw new Error('Only admins can delete residences');
    }
    // Count documents that will be deleted
    const documentsToDelete = await db_1.db
        .select({ id: schema_1.documents.id })
        .from(schema_1.documents)
        .where((0, drizzle_orm_1.inArray)(schema_1.documents.residenceId, residenceIds));
    // Delete documents (hard delete since no isActive field)
    await db_1.db
        .delete(schema_1.documents)
        .where((0, drizzle_orm_1.inArray)(schema_1.documents.residenceId, residenceIds));
    // Soft delete user-residence relationships
    await db_1.db
        .update(schema_1.userResidences)
        .set({ isActive: false, updatedAt: new Date() })
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.userResidences.residenceId, residenceIds), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)));
    // Soft delete residences
    await db_1.db
        .update(schema_1.residences)
        .set({ isActive: false, updatedAt: new Date() })
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds), (0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId)));
    console.log(`üóëÔ∏è Deleted ${residenceIds.length} residences and ${documentsToDelete.length} documents for building ${buildingId}`);
    return {
        deletedCount: residenceIds.length,
        documentsDeleted: documentsToDelete.length
    };
}
async function updateBuilding(buildingId, buildingData) {
    // Get current building to check for residence count changes
    const currentBuilding = await db_1.db
        .select({ totalUnits: schema_1.buildings.totalUnits, totalFloors: schema_1.buildings.totalFloors, organizationId: schema_1.buildings.organizationId })
        .from(schema_1.buildings)
        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
        .limit(1);
    if (currentBuilding.length === 0) {
        throw new Error('Building not found');
    }
    const updatedBuilding = await db_1.db
        .update(schema_1.buildings)
        .set({
        name: buildingData.name,
        address: buildingData.address || '',
        city: buildingData.city || '',
        province: buildingData.province || 'QC',
        postalCode: buildingData.postalCode || '',
        buildingType: buildingData.buildingType || 'condo',
        yearBuilt: buildingData.yearBuilt,
        totalUnits: buildingData.totalUnits || 0,
        totalFloors: buildingData.totalFloors,
        parkingSpaces: buildingData.parkingSpaces,
        storageSpaces: buildingData.storageSpaces,
        amenities: buildingData.amenities ? JSON.stringify(buildingData.amenities) : null,
        managementCompany: buildingData.managementCompany,
        organizationId: buildingData.organizationId,
        updatedAt: new Date(),
    })
        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
        .returning();
    // Handle residence count changes if totalUnits changed
    if (buildingData.totalUnits && buildingData.totalUnits !== currentBuilding[0].totalUnits) {
        await adjustResidenceCount(buildingId, currentBuilding[0].organizationId, buildingData.totalUnits, currentBuilding[0].totalUnits, buildingData.totalFloors || currentBuilding[0].totalFloors || 1);
    }
    return updatedBuilding[0];
}
/**
 * Soft deletes a building.
 * @param buildingId
 */
/**
 * DeleteBuilding function.
 * @param buildingId
 * @returns Function result.
 */
async function deleteBuilding(buildingId) {
    const deletedBuilding = await db_1.db
        .update(schema_1.buildings)
        .set({
        isActive: false,
        updatedAt: new Date(),
    })
        .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId))
        .returning();
    return deletedBuilding[0];
}
/**
 * Performs cascade delete of a building and all related entities.
 * @param buildingId
 */
/**
 * CascadeDeleteBuilding function.
 * @param buildingId
 * @returns Function result.
 */
async function cascadeDeleteBuilding(buildingId) {
    // Check if building exists
    const building = await db_1.db
        .select({ id: schema_1.buildings.id, name: schema_1.buildings.name })
        .from(schema_1.buildings)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)))
        .limit(1);
    if (building.length === 0) {
        throw new Error('Building not found');
    }
    // Start transaction for cascading delete
    await db_1.db.transaction(async (tx) => {
        // 1. Get all residences in this building
        const buildingResidences = await tx
            .select({ id: schema_1.residences.id })
            .from(schema_1.residences)
            .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.residences.buildingId, buildingId), (0, drizzle_orm_1.eq)(schema_1.residences.isActive, true)));
        const residenceIds = buildingResidences.map((r) => r.id);
        if (residenceIds.length > 0) {
            // 2. Delete documents associated with building or its residences
            // Note: Document table uses boolean flags, not foreign keys
            await tx.delete(schema_1.documents).where((0, drizzle_orm_1.inArray)(schema_1.documents.residenceId, residenceIds));
            // 3. Soft delete user-residence relationships
            await tx
                .update(schema_1.userResidences)
                .set({ isActive: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.inArray)(schema_1.userResidences.residenceId, residenceIds));
            // 4. Find and soft delete orphaned users (users who now have no active relationships)
            const orphanedUsers = await tx
                .select({ id: schema_1.users.id })
                .from(schema_1.users)
                .leftJoin(schema_1.userOrganizations, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userOrganizations.userId), (0, drizzle_orm_1.eq)(schema_1.userOrganizations.isActive, true)))
                .leftJoin(schema_1.userResidences, (0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.id, schema_1.userResidences.userId), (0, drizzle_orm_1.eq)(schema_1.userResidences.isActive, true)))
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.users.isActive, true), (0, drizzle_orm_1.isNull)(schema_1.userOrganizations.userId), (0, drizzle_orm_1.isNull)(schema_1.userResidences.userId)));
            if (orphanedUsers.length > 0) {
                const orphanedUserIds = orphanedUsers.map((u) => u.id);
                await tx
                    .update(schema_1.users)
                    .set({ isActive: false, updatedAt: new Date() })
                    .where((0, drizzle_orm_1.inArray)(schema_1.users.id, orphanedUserIds));
            }
            // 5. Soft delete residences
            await tx
                .update(schema_1.residences)
                .set({ isActive: false, updatedAt: new Date() })
                .where((0, drizzle_orm_1.inArray)(schema_1.residences.id, residenceIds));
        }
        // 6. Finally, soft delete the building
        await tx
            .update(schema_1.buildings)
            .set({ isActive: false, updatedAt: new Date() })
            .where((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId));
    });
    return building[0];
}
/**
 * Checks if a building exists and is active.
 * @param buildingId
 */
/**
 * BuildingExists function.
 * @param buildingId
 * @returns Function result.
 */
async function buildingExists(buildingId) {
    const result = await db_1.db
        .select({ id: schema_1.buildings.id })
        .from(schema_1.buildings)
        .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.buildings.id, buildingId), (0, drizzle_orm_1.eq)(schema_1.buildings.isActive, true)))
        .limit(1);
    return result.length > 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,