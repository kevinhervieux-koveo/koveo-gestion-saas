{"file":"/home/runner/workspace/tests/integration/document-view-button-fix.test.ts","mappings":"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","names":[],"sources":["/home/runner/workspace/tests/integration/document-view-button-fix.test.ts"],"sourcesContent":["/**\n * Document View Button Fix Test\n * Tests that validate the fix for the view button downloading files instead of viewing them\n * The issue is in how the UI handles the blob creation vs direct window.open to the API endpoint\n */\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\n\ndescribe('Document View Button Fix Validation', () => {\n\n  test('should identify the root cause of view button issue', () => {\n    // The issue: UI creates blob from fetch response, which always downloads\n    const currentBrokenBehavior = {\n      method: 'fetch_then_blob_then_window_open',\n      steps: [\n        '1. Fetch /api/documents/{id}/file with credentials',\n        '2. Convert response to blob', \n        '3. Create blob URL with URL.createObjectURL()',\n        '4. Open blob URL with window.open()',\n        '5. Browser downloads blob regardless of Content-Disposition'\n      ],\n      result: 'downloads_file'\n    };\n\n    // The fix: Direct window.open to API endpoint (let browser handle Content-Disposition)\n    const fixedBehavior = {\n      method: 'direct_window_open_to_api',\n      steps: [\n        '1. Construct API URL: /api/documents/{id}/file (no download=true)',\n        '2. Use window.open() directly to API endpoint',\n        '3. Browser requests file with Content-Disposition: inline',\n        '4. Browser displays file inline (view mode)'\n      ],\n      result: 'views_file_inline'\n    };\n\n    // Verify we understand the issue\n    expect(currentBrokenBehavior.result).toBe('downloads_file');\n    expect(fixedBehavior.result).toBe('views_file_inline');\n    \n    // The key difference: blob creation forces download vs direct API call respects headers\n    expect(currentBrokenBehavior.method).toBe('fetch_then_blob_then_window_open');\n    expect(fixedBehavior.method).toBe('direct_window_open_to_api');\n  });\n\n  test('should validate the correct view button implementation', () => {\n    // WRONG: Current implementation that downloads instead of viewing\n    const wrongViewButtonLogic = `\n      const response = await fetch('/api/documents/123/file', {\n        method: 'GET',\n        credentials: 'include',\n      });\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');  // ❌ This downloads the blob\n    `;\n\n    // CORRECT: Fixed implementation that views inline\n    const correctViewButtonLogic = `\n      // For view: Direct window.open to API endpoint\n      window.open('/api/documents/123/file', '_blank');  // ✅ This respects Content-Disposition: inline\n    `;\n\n    // CORRECT: Download button can still use blob approach\n    const correctDownloadButtonLogic = `\n      // For download: Use fetch + blob + download link (or direct API with download=true)\n      const response = await fetch('/api/documents/123/file?download=true', {\n        method: 'GET',\n        credentials: 'include',\n      });\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = 'filename.ext';\n      link.click();  // ✅ This properly downloads\n    `;\n\n    // Verify the fix approach\n    expect(wrongViewButtonLogic).toContain('URL.createObjectURL(blob)');\n    expect(correctViewButtonLogic).toContain(\"window.open('/api/documents/123/file'\");\n    expect(correctViewButtonLogic).not.toContain('blob');\n    expect(correctDownloadButtonLogic).toContain('download=true');\n  });\n\n  test('should test the authentication consideration for direct window.open', () => {\n    // Issue: Direct window.open might not send authentication cookies\n    // Solution: Ensure API endpoint accepts credentials in new window context\n\n    const authenticationApproaches = {\n      // Approach 1: Direct window.open (simple but may have auth issues)\n      directOpen: {\n        code: `window.open('/api/documents/123/file', '_blank');`,\n        authMethod: 'cookies_in_new_window',\n        pros: ['Simple', 'Respects Content-Disposition'],\n        cons: ['May not send auth cookies', 'Browser dependent']\n      },\n\n      // Approach 2: Fetch + blob URL but with proper Content-Disposition handling\n      fetchWithProperHeaders: {\n        code: `\n          const response = await fetch('/api/documents/123/file', {\n            method: 'GET',\n            credentials: 'include',\n          });\n          // Check Content-Disposition to decide behavior\n          const disposition = response.headers.get('Content-Disposition');\n          if (disposition && disposition.includes('inline')) {\n            // For inline: create blob and open (but this still downloads blobs)\n            const blob = await response.blob();\n            const url = URL.createObjectURL(blob);\n            window.open(url, '_blank');\n          }\n        `,\n        authMethod: 'explicit_credentials',\n        pros: ['Explicit auth', 'Can check headers'],\n        cons: ['Complex', 'Blob URLs still download']\n      },\n\n      // Approach 3: Hybrid - try direct first, fallback to fetch\n      hybrid: {\n        code: `\n          // Try direct open first\n          const newWindow = window.open('/api/documents/123/file', '_blank');\n          if (!newWindow) {\n            // Fallback to fetch approach if popup blocked\n            // ... fetch logic\n          }\n        `,\n        authMethod: 'direct_with_fallback',\n        pros: ['Best of both worlds'],\n        cons: ['More complex']\n      }\n    };\n\n    // The best approach depends on authentication setup\n    expect(authenticationApproaches.directOpen.pros).toContain('Respects Content-Disposition');\n    expect(authenticationApproaches.fetchWithProperHeaders.cons).toContain('Blob URLs still download');\n  });\n\n  test('should provide the specific fix for bills.tsx view button', () => {\n    const documentId = 'test-doc-123';\n\n    // Current broken implementation (from bills.tsx around line 947)\n    const currentBrokenCode = `\n      const response = await fetch(\\`/api/documents/\\${doc.id}/file\\`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch document');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      window.open(url, '_blank');\n      window.URL.revokeObjectURL(url);\n    `;\n\n    // Fixed implementation - try direct window.open first\n    const fixedCode = `\n      // Try direct window.open first (respects Content-Disposition: inline)\n      const documentUrl = \\`/api/documents/\\${doc.id}/file\\`;\n      const newWindow = window.open(documentUrl, '_blank');\n      \n      if (!newWindow) {\n        // Fallback: if popup blocked, use fetch approach\n        try {\n          const response = await fetch(documentUrl, {\n            method: 'GET',\n            credentials: 'include',\n          });\n          \n          if (!response.ok) {\n            throw new Error('Failed to fetch document');\n          }\n          \n          const blob = await response.blob();\n          const url = window.URL.createObjectURL(blob);\n          const fallbackWindow = window.open(url, '_blank');\n          if (fallbackWindow) {\n            window.URL.revokeObjectURL(url);\n          }\n        } catch (error) {\n          console.error('Document view failed:', error);\n        }\n      }\n    `;\n\n    // Verify the fix\n    expect(currentBrokenCode).toContain('URL.createObjectURL(blob)');\n    expect(fixedCode).toContain('window.open(documentUrl, \\'_blank\\')');\n    expect(fixedCode).toContain('fallback');\n  });\n\n  test('should validate that download buttons continue to work correctly', () => {\n    // Download button should continue using the current implementation\n    // because it explicitly adds ?download=true parameter\n\n    const correctDownloadImplementation = `\n      const response = await fetch(\\`/api/documents/\\${doc.id}/file?download=true\\`, {\n        method: 'GET',\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Download failed');\n      }\n      \n      const contentDisposition = response.headers.get('Content-Disposition');\n      let fileName = 'document';\n      if (contentDisposition) {\n        const fileNameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n        if (fileNameMatch) {\n          fileName = fileNameMatch[1];\n        }\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = fileName;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n    `;\n\n    // Download should use download=true parameter\n    expect(correctDownloadImplementation).toContain('download=true');\n    expect(correctDownloadImplementation).toContain('link.download = fileName');\n    expect(correctDownloadImplementation).toContain('link.click()');\n  });\n\n  test('should test the fix with different file types', () => {\n    const fileTypes = [\n      { ext: '.jpg', mimeType: 'image/jpeg', shouldViewInline: true },\n      { ext: '.pdf', mimeType: 'application/pdf', shouldViewInline: true },\n      { ext: '.txt', mimeType: 'text/plain', shouldViewInline: true },\n      { ext: '.docx', mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', shouldViewInline: false }\n    ];\n\n    fileTypes.forEach(fileType => {\n      if (fileType.shouldViewInline) {\n        // These files should open inline when using direct window.open\n        expect(fileType.mimeType).toBeTruthy();\n        // The API should set Content-Disposition: inline for these\n        const expectedHeader = 'inline; filename=\"test' + fileType.ext + '\"';\n        expect(expectedHeader).toContain('inline');\n      }\n    });\n  });\n});"],"version":3}