4d5d03bdee8c69e30b1c9a38717d900c
'use strict';
var UI = require('../../document/UI.js');
require('../../utils/dataTransfer/Clipboard.js');
var selection = require('../../utils/focus/selection.js');
function resolveCaretPosition({ target, node, offset }) {
    if (selection.hasOwnSelection(target)) {
        return {
            node: target,
            offset: offset !== null && offset !== undefined ? offset : UI.getUIValue(target).length
        };
    }
    else if (node) {
        return {
            node,
            offset: offset !== null && offset !== undefined ? offset : node.nodeType === 3 ? node.nodeValue.length : node.childNodes.length
        };
    }
    return findNodeAtTextOffset(target, offset);
}
function findNodeAtTextOffset(node, offset, isRoot = true) {
    // When clicking after the content the browser behavior can be complicated:
    // 1. If there is textContent after the last element child,
    // the cursor is moved there.
    // 2. If there is textContent in the last element child,
    // the browser moves the cursor to the last non-empty text node inside this element.
    // 3. Otherwise the cursor is moved to the end of the target.
    let i = offset === undefined ? node.childNodes.length - 1 : 0;
    const step = offset === undefined ? -1 : 1;
    while (offset === undefined ? i >= (isRoot ? Math.max(node.childNodes.length - 1, 0) : 0) : i <= node.childNodes.length) {
        if (offset && i === node.childNodes.length) {
            throw new Error('The given offset is out of bounds.');
        }
        const c = node.childNodes.item(i);
        const text = String(c.textContent);
        if (text.length) {
            if (offset !== undefined && text.length < offset) {
                offset -= text.length;
            }
            else if (c.nodeType === 1) {
                return findNodeAtTextOffset(c, offset, false);
            }
            else {
                // The pre-commit hooks keeps changing this
                // See https://github.com/kentcdodds/kcd-scripts/issues/218
                /* istanbul ignore else */ // eslint-disable-next-line no-lonely-if
                if (c.nodeType === 3) {
                    return {
                        node: c,
                        offset: offset !== null && offset !== undefined ? offset : c.nodeValue.length
                    };
                }
            }
        }
        i += step;
    }
    return {
        node,
        offset: node.childNodes.length
    };
}
exports.resolveCaretPosition = resolveCaretPosition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi9yZXNvbHZlQ2FyZXRQb3NpdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUN6QyxPQUFPLENBQUMsdUNBQXVDLENBQUMsQ0FBQztBQUNqRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUUxRCxTQUFTLG9CQUFvQixDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDbEQsSUFBSSxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEMsT0FBTztZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osTUFBTSxFQUFFLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU07U0FDMUYsQ0FBQztJQUNOLENBQUM7U0FBTSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2QsT0FBTztZQUNILElBQUk7WUFDSixNQUFNLEVBQUUsTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNO1NBQ2xJLENBQUM7SUFDTixDQUFDO0lBQ0QsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUNELFNBQVMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsSUFBSTtJQUNyRCwyRUFBMkU7SUFDM0UsMkRBQTJEO0lBQzNELDZCQUE2QjtJQUM3Qix3REFBd0Q7SUFDeEQsb0ZBQW9GO0lBQ3BGLDZEQUE2RDtJQUM3RCxJQUFJLENBQUMsR0FBRyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxNQUFNLElBQUksR0FBRyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLE9BQU0sTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBQyxDQUFDO1FBQ3BILElBQUksTUFBTSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUMxRCxDQUFDO1FBQ0QsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNkLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO2dCQUMvQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUMxQixDQUFDO2lCQUFNLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDMUIsT0FBTyxvQkFBb0IsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2xELENBQUM7aUJBQU0sQ0FBQztnQkFDSiwyQ0FBMkM7Z0JBQzNDLDJEQUEyRDtnQkFDM0QsMEJBQTBCLENBQUMsd0NBQXdDO2dCQUNuRSxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFLENBQUM7b0JBQ25CLE9BQU87d0JBQ0gsSUFBSSxFQUFFLENBQUM7d0JBQ1AsTUFBTSxFQUFFLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU07cUJBQ2hGLENBQUM7Z0JBQ04sQ0FBQztZQUNMLENBQUM7UUFDTCxDQUFDO1FBQ0QsQ0FBQyxJQUFJLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRCxPQUFPO1FBQ0gsSUFBSTtRQUNKLE1BQU0sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU07S0FDakMsQ0FBQztBQUNOLENBQUM7QUFFRCxPQUFPLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcnVubmVyL3dvcmtzcGFjZS9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50L2Rpc3QvY2pzL2V2ZW50L3NlbGVjdGlvbi9yZXNvbHZlQ2FyZXRQb3NpdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBVSSA9IHJlcXVpcmUoJy4uLy4uL2RvY3VtZW50L1VJLmpzJyk7XG5yZXF1aXJlKCcuLi8uLi91dGlscy9kYXRhVHJhbnNmZXIvQ2xpcGJvYXJkLmpzJyk7XG52YXIgc2VsZWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZm9jdXMvc2VsZWN0aW9uLmpzJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVDYXJldFBvc2l0aW9uKHsgdGFyZ2V0LCBub2RlLCBvZmZzZXQgfSkge1xuICAgIGlmIChzZWxlY3Rpb24uaGFzT3duU2VsZWN0aW9uKHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGU6IHRhcmdldCxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICE9PSBudWxsICYmIG9mZnNldCAhPT0gdW5kZWZpbmVkID8gb2Zmc2V0IDogVUkuZ2V0VUlWYWx1ZSh0YXJnZXQpLmxlbmd0aFxuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAobm9kZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0ICE9PSBudWxsICYmIG9mZnNldCAhPT0gdW5kZWZpbmVkID8gb2Zmc2V0IDogbm9kZS5ub2RlVHlwZSA9PT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGhcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmROb2RlQXRUZXh0T2Zmc2V0KHRhcmdldCwgb2Zmc2V0KTtcbn1cbmZ1bmN0aW9uIGZpbmROb2RlQXRUZXh0T2Zmc2V0KG5vZGUsIG9mZnNldCwgaXNSb290ID0gdHJ1ZSkge1xuICAgIC8vIFdoZW4gY2xpY2tpbmcgYWZ0ZXIgdGhlIGNvbnRlbnQgdGhlIGJyb3dzZXIgYmVoYXZpb3IgY2FuIGJlIGNvbXBsaWNhdGVkOlxuICAgIC8vIDEuIElmIHRoZXJlIGlzIHRleHRDb250ZW50IGFmdGVyIHRoZSBsYXN0IGVsZW1lbnQgY2hpbGQsXG4gICAgLy8gdGhlIGN1cnNvciBpcyBtb3ZlZCB0aGVyZS5cbiAgICAvLyAyLiBJZiB0aGVyZSBpcyB0ZXh0Q29udGVudCBpbiB0aGUgbGFzdCBlbGVtZW50IGNoaWxkLFxuICAgIC8vIHRoZSBicm93c2VyIG1vdmVzIHRoZSBjdXJzb3IgdG8gdGhlIGxhc3Qgbm9uLWVtcHR5IHRleHQgbm9kZSBpbnNpZGUgdGhpcyBlbGVtZW50LlxuICAgIC8vIDMuIE90aGVyd2lzZSB0aGUgY3Vyc29yIGlzIG1vdmVkIHRvIHRoZSBlbmQgb2YgdGhlIHRhcmdldC5cbiAgICBsZXQgaSA9IG9mZnNldCA9PT0gdW5kZWZpbmVkID8gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDEgOiAwO1xuICAgIGNvbnN0IHN0ZXAgPSBvZmZzZXQgPT09IHVuZGVmaW5lZCA/IC0xIDogMTtcbiAgICB3aGlsZShvZmZzZXQgPT09IHVuZGVmaW5lZCA/IGkgPj0gKGlzUm9vdCA/IE1hdGgubWF4KG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxLCAwKSA6IDApIDogaSA8PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKXtcbiAgICAgICAgaWYgKG9mZnNldCAmJiBpID09PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBnaXZlbiBvZmZzZXQgaXMgb3V0IG9mIGJvdW5kcy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjID0gbm9kZS5jaGlsZE5vZGVzLml0ZW0oaSk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBTdHJpbmcoYy50ZXh0Q29udGVudCk7XG4gICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gdW5kZWZpbmVkICYmIHRleHQubGVuZ3RoIDwgb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0IC09IHRleHQubGVuZ3RoO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbmROb2RlQXRUZXh0T2Zmc2V0KGMsIG9mZnNldCwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgcHJlLWNvbW1pdCBob29rcyBrZWVwcyBjaGFuZ2luZyB0aGlzXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9rZW50Y2RvZGRzL2tjZC1zY3JpcHRzL2lzc3Vlcy8yMThcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqLyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZWx5LWlmXG4gICAgICAgICAgICAgICAgaWYgKGMubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCAhPT0gbnVsbCAmJiBvZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9mZnNldCA6IGMubm9kZVZhbHVlLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpICs9IHN0ZXA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGUsXG4gICAgICAgIG9mZnNldDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aFxuICAgIH07XG59XG5cbmV4cG9ydHMucmVzb2x2ZUNhcmV0UG9zaXRpb24gPSByZXNvbHZlQ2FyZXRQb3NpdGlvbjtcbiJdLCJ2ZXJzaW9uIjozfQ==