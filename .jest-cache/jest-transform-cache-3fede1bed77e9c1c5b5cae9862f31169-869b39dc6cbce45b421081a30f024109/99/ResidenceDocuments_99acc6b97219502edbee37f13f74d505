115e0e77c1f5c40654dbafc0a3a1ff60
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ResidenceDocuments;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_query_1 = require("@tanstack/react-query");
const wouter_1 = require("wouter");
const queryClient_1 = require("@/lib/queryClient");
const DocumentManager_1 = __importDefault(require("@/components/common/DocumentManager"));
const button_1 = require("@/components/ui/button");
const lucide_react_1 = require("lucide-react");
const use_language_1 = require("@/hooks/use-language");
function ResidenceDocuments() {
    const [, navigate] = (0, wouter_1.useLocation)();
    const params = (0, wouter_1.useParams)();
    const { t } = (0, use_language_1.useLanguage)();
    // Get residenceId from URL (both path param and query param)
    const urlParams = new URLSearchParams(window.location.search);
    const residenceId = params.residenceId || urlParams.get('residenceId');
    // Get current user
    const { data: user } = (0, react_query_1.useQuery)({
        queryKey: ['/api/auth/user'],
        queryFn: () => (0, queryClient_1.apiRequest)('GET', '/api/auth/user'),
    });
    // Get residence info
    const { data: residence, isError: residenceError, error, } = (0, react_query_1.useQuery)({
        queryKey: ['/api/residences', residenceId],
        queryFn: async () => {
            console.log('🔍 ResidenceDocuments: Fetching residence data for ID:', residenceId);
            const response = await fetch(`/api/residences/${residenceId}`, {
                credentials: 'include',
            });
            if (!response.ok) {
                if (response.status === 404) {
                    throw new Error('RESIDENCE_NOT_FOUND');
                }
                throw new Error('Failed to fetch residence');
            }
            const data = await response.json();
            console.log('🔍 ResidenceDocuments: Residence API response:', data);
            return data;
        },
        enabled: !!residenceId,
        retry: false, // Don't retry on 404s
    });
    if (!residenceId) {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center', children: [(0, jsx_runtime_1.jsx)("p", { className: 'text-gray-500 mb-4', children: "Residence ID is required" }), (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => navigate('/residents/residence'), "data-testid": 'button-back-to-residences', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Back to Residences"] })] }) }) }));
    }
    // Handle residence not found
    if (residenceError && error?.message === 'RESIDENCE_NOT_FOUND') {
        return ((0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: (0, jsx_runtime_1.jsx)("div", { className: 'flex-1 flex items-center justify-center', children: (0, jsx_runtime_1.jsxs)("div", { className: 'text-center max-w-md', children: [(0, jsx_runtime_1.jsx)("h2", { className: 'text-xl font-semibold mb-4', children: "Residence Not Found" }), (0, jsx_runtime_1.jsxs)("p", { className: 'text-gray-500 mb-4', children: ["The residence ID \"", residenceId, "\" doesn't exist in the development database."] }), (0, jsx_runtime_1.jsx)("p", { className: 'text-sm text-gray-400 mb-6', children: "This might be a production database ID. Please use a valid development residence ID." }), (0, jsx_runtime_1.jsxs)("div", { className: 'space-y-2', children: [(0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'default', onClick: () => navigate('/residents/residence'), "data-testid": 'button-back-to-residences', className: 'w-full', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), "Back to Residences"] }), (0, jsx_runtime_1.jsx)(button_1.Button, { variant: 'outline', onClick: () => navigate('/residents/residences/e27ac924-8120-4904-a791-d1e9db544d58/documents'), "data-testid": 'button-go-to-valid-residence', className: 'w-full', children: "Go to Unit 101 (Test Residence)" })] })] }) }) }));
    }
    const isUserTenant = user?.role === 'tenant';
    const residenceName = residence?.unitNumber || residence?.unit_number
        ? `Unit ${residence.unitNumber || residence.unit_number}`
        : 'Residence';
    return ((0, jsx_runtime_1.jsxs)("div", { className: 'flex-1 flex flex-col overflow-hidden', children: [(0, jsx_runtime_1.jsx)("div", { className: 'p-6 pb-0', children: (0, jsx_runtime_1.jsxs)(button_1.Button, { variant: 'outline', onClick: () => navigate('/residents/residence'), className: 'mb-4', "data-testid": 'button-back', children: [(0, jsx_runtime_1.jsx)(lucide_react_1.ArrowLeft, { className: 'w-4 h-4 mr-2' }), t('backToResidences')] }) }), (0, jsx_runtime_1.jsx)(DocumentManager_1.default, { config: {
                    type: 'residence',
                    userRole: 'resident',
                    entityId: residenceId,
                    entityName: residenceName,
                    entityAddress: residence?.address,
                    allowCreate: !isUserTenant,
                    allowEdit: !isUserTenant,
                    allowDelete: !isUserTenant,
                    showVisibilityToggle: !isUserTenant,
                } })] }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,