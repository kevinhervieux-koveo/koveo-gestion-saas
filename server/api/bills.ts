import type { Express } from 'express';
import { eq, desc, and, sql, isNull } from 'drizzle-orm';
import { db } from '../db';
import * as schema from '../../shared/schema';
import { requireAuth } from '../auth';
import { z } from 'zod';
import { moneyFlowJob } from '../jobs/money_flow_job';
import { billGenerationService } from '../services/bill-generation-service';

const { buildings, bills } = schema;

// Mock data showcasing the new sophisticated bills methodology
const mockBills = [
  // Demo Building 1 - Advanced Insurance with Split Payment (60% now, 40% in 6 months)
  {
    id: '1',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'INS-2024-001',
    title: 'Annual Insurance Premium - Split Payment Plan',
    description: 'Comprehensive building insurance with sophisticated payment plan: 60% immediate, 40% deferred 6 months',
    category: 'insurance',
    vendor: 'Quebec Provincial Insurance Corp.',
    paymentType: 'recurrent',
    schedulePayment: 'yearly',
    scheduleCustom: null,
    costs: ['8400.00', '5600.00'], // 60% ($8,400) and 40% ($5,600) of $14,000
    totalAmount: '14000.00',
    startDate: '2024-01-01',
    endDate: '2027-01-01', // 3-year contract for future bill generation
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/insurance/INS-2024-001.pdf',
    documentName: 'Building_Insurance_Policy_2024.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { coverage: 'comprehensive', deductible: '5000', premium: '14000', paymentPlan: 'split' },
    notes: 'Advanced split payment: 60% immediate ($8,400), 40% after 6 months ($5,600). Generates future bill instances automatically.',
    createdAt: new Date('2024-01-15'),
    updatedAt: new Date('2024-01-15'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 1 - Maintenance Contract with Monthly Installments (12 payments)
  {
    id: '2',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'MAINT-2024-002',
    title: 'Annual Maintenance - Monthly Installment Plan',
    description: 'Full-service maintenance contract paid in 12 monthly installments with varying seasonal costs',
    category: 'maintenance',
    vendor: 'Montreal Property Services Inc.',
    paymentType: 'recurrent',
    schedulePayment: 'yearly',
    scheduleCustom: null,
    costs: [
      '1300.00', '1300.00', '1200.00', // Q1 - Higher winter costs
      '1000.00', '1000.00', '1000.00', // Q2 - Moderate spring costs  
      '800.00', '800.00', '800.00',    // Q3 - Lower summer costs
      '1100.00', '1100.00', '1100.00'  // Q4 - Higher fall costs
    ],
    totalAmount: '12500.00',
    startDate: '2024-01-01',
    endDate: null, // Ongoing contract for 25-year projection
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/maintenance/MAINT-2024-002.pdf',
    documentName: 'Maintenance_Contract_2024.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { services: 'comprehensive', coverage: '24/7', technicians: '4', paymentPlan: 'monthly_variable' },
    notes: 'Seasonal monthly payments: Winter/Fall higher costs for heating system maintenance. Generates 25-year projection.',
    createdAt: new Date('2024-01-10'),
    updatedAt: new Date('2024-01-10'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 1 - Utilities with Quarterly Variable Payments
  {
    id: '3',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'UTIL-2024-003',
    title: 'Hydro-Quebec - Seasonal Variable Rates',
    description: 'Quarterly utility payments with seasonal rate variations and peak demand charges',
    category: 'utilities',
    vendor: 'Hydro-Quebec',
    paymentType: 'recurrent',
    schedulePayment: 'quarterly',
    scheduleCustom: null,
    costs: ['1200.00', '800.00', '600.00', '1000.00'], // Winter, Spring, Summer, Fall
    totalAmount: '3600.00',
    startDate: '2024-01-01',
    endDate: '2026-01-01', // 2-year contract
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/utilities/UTIL-2024-003.pdf',
    documentName: 'Hydro_Seasonal_Contract_2024.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { consumption: 'variable', peak_demand: '45kW', rate: 'commercial_seasonal', paymentPlan: 'quarterly_variable' },
    notes: 'Seasonal rates: Winter peak ($1,200), Summer low ($600). Future bills auto-generated quarterly.',
    createdAt: new Date('2024-01-25'),
    updatedAt: new Date('2024-01-25'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 1 - Major Renovation with Complex 5-Payment Plan
  {
    id: '4',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'RENO-2024-004',
    title: 'Building Renovation - 5-Phase Payment Plan',
    description: 'Major building renovation with milestone-based payment schedule over 18 months',
    category: 'maintenance',
    vendor: 'Quebec Construction Elite',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2024-03-01', '2024-06-01', '2024-09-01', '2024-12-01', '2025-03-01'],
    costs: ['25000.00', '30000.00', '20000.00', '15000.00', '10000.00'], // Decreasing payments
    totalAmount: '100000.00',
    startDate: '2024-02-01',
    endDate: '2025-04-01',
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/renovation/RENO-2024-004.pdf',
    documentName: 'Renovation_Contract_2024.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { project: 'major_renovation', phases: '5', timeline: '18_months', paymentPlan: 'milestone_based' },
    notes: 'Milestone payments: Design (25k), Foundation (30k), Structure (20k), Finishing (15k), Final (10k).',
    createdAt: new Date('2024-02-01'),
    updatedAt: new Date('2024-02-01'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 1 - Security with Quarterly Escalating Costs
  {
    id: '5',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'SEC-2024-005',
    title: 'Advanced Security System - Escalating Service Plan',
    description: 'Installation and maintenance of keycard access, CCTV, and alarm systems with escalating quarterly costs',
    category: 'security',
    vendor: 'SecureTech Montreal',
    paymentType: 'recurrent',
    schedulePayment: 'quarterly',
    scheduleCustom: null,
    costs: ['1800.00', '1900.00', '2000.00', '2100.00'], // 5% quarterly increases
    totalAmount: '7800.00',
    startDate: '2024-01-01',
    endDate: '2026-01-01', // 2-year contract
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/security/SEC-2024-005.pdf',
    documentName: 'Security_System_Contract.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { cameras: '16', access_points: '8', monitoring: '24/7', paymentPlan: 'quarterly_escalating' },
    notes: 'Quarterly escalating costs: Q1 ($1,800), Q2 ($1,900), Q3 ($2,000), Q4 ($2,100). 5% increases account for enhanced services.',
    createdAt: new Date('2024-01-08'),
    updatedAt: new Date('2024-01-08'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - Advanced Payroll with Weekly Variable Costs  
  {
    id: '6',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'SAL-2024-006',
    title: 'Building Management Payroll - Advanced Split Structure',
    description: 'Multi-component monthly payroll with department-based payment scheduling',
    category: 'salary',
    vendor: 'Quebec Payroll Solutions Inc.',
    paymentType: 'recurrent',
    schedulePayment: 'monthly',
    scheduleCustom: null,
    costs: ['5200.00', '3800.00', '2200.00', '1800.00'], // Manager, Maintenance, Security, Cleaning
    totalAmount: '13000.00',
    startDate: '2024-01-01',
    endDate: null, // Ongoing for 25-year projection
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/payroll/SAL-2024-006.pdf',
    documentName: 'Monthly_Payroll_Advanced_2024.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { employees: '4', departments: '3', paymentPlan: 'multi_component', manager: '1', maintenance: '2', security: '1' },
    notes: 'Advanced payroll structure: Manager ($5,200), Maintenance Team ($3,800), Security ($2,200), Cleaning Staff ($1,800). Future instances auto-generated.',
    createdAt: new Date('2024-01-31'),
    updatedAt: new Date('2024-01-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 2 - Cleaning with Weekly Advanced Scheduling
  {
    id: '7',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'CLEAN-2024-007',
    title: 'Professional Cleaning - Advanced Weekly Schedule',
    description: 'Sophisticated weekly cleaning service with variable monthly billing cycles',
    category: 'cleaning',
    vendor: 'Quebec Premium Clean Services',
    paymentType: 'recurrent',
    schedulePayment: 'monthly',
    scheduleCustom: null,
    costs: ['1280.00', '1360.00', '1200.00', '1440.00'], // 4 weeks, varying by area coverage
    totalAmount: '5280.00',
    startDate: '2024-01-01',
    endDate: '2025-12-31', // 2-year service contract
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/cleaning/CLEAN-2024-007.pdf',
    documentName: 'Advanced_Cleaning_Contract.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { frequency: 'weekly', areas: '12', eco_friendly: true, paymentPlan: 'monthly_variable' },
    notes: 'Advanced weekly service with monthly variable billing: Week 1-4 coverage varies. Eco-friendly products and specialized equipment included.',
    createdAt: new Date('2024-01-05'),
    updatedAt: new Date('2024-01-05'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 2 - Advanced Landscaping with Seasonal Complex Payments
  {
    id: '8',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'LAND-2024-008',
    title: 'Seasonal Landscaping - Advanced Multi-Phase Contract',
    description: 'Sophisticated landscaping services with seasonal variable pricing and snow removal premiums',
    category: 'landscaping',
    vendor: 'Montreal Elite Landscaping Services',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2024-04-01', '2024-07-01', '2024-10-01', '2024-12-01'],
    costs: ['2200.00', '1800.00', '2200.00', '3500.00'], // Spring setup, Summer low, Fall cleanup, Winter premium
    totalAmount: '9700.00',
    startDate: '2024-04-01',
    endDate: '2027-03-31', // 3-year contract for future projections
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/landscaping/LAND-2024-008.pdf',
    documentName: 'Advanced_Landscaping_Contract.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { seasons: '4', snow_removal: true, lawn_area: '2500sqm', paymentPlan: 'seasonal_variable' },
    notes: 'Advanced seasonal payments: Spring setup ($2,200), Summer maintenance ($1,800), Fall cleanup ($2,200), Winter snow removal ($3,500). Multi-year contract.',
    createdAt: new Date('2024-03-15'),
    updatedAt: new Date('2024-03-15'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 2 - Supplies with Advanced Monthly Variable Costs
  {
    id: '9',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'SUP-2024-009',
    title: 'Building Supplies - Advanced Inventory Management',
    description: 'Sophisticated monthly supply system with seasonal adjustments and emergency reserves',
    category: 'supplies',
    vendor: 'Quebec Premium Building Supplies',
    paymentType: 'recurrent',
    schedulePayment: 'monthly',
    scheduleCustom: null,
    costs: ['520.00', '480.00', '420.00', '380.00', '400.00', '350.00', '300.00', '320.00', '380.00', '450.00', '550.00', '620.00'], // Seasonal variation
    totalAmount: '5170.00',
    startDate: '2024-01-01',
    endDate: null, // Ongoing for 25-year projection
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/supplies/SUP-2024-009.pdf',
    documentName: 'Advanced_Supply_Contract.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { inventory: 'automated', seasonal: true, emergency_reserve: true, paymentPlan: 'monthly_seasonal' },
    notes: 'Advanced supply management: Higher winter costs for heating supplies, lower summer costs. Automated inventory tracking with emergency reserves.',
    createdAt: new Date('2024-01-28'),
    updatedAt: new Date('2024-01-28'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 1 - Taxes with Advanced Quarterly Installment Plan
  {
    id: '10',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'TAX-2024-010',
    title: 'Municipal Property Taxes - Advanced Payment Schedule',
    description: 'Municipal and school board property taxes with sophisticated quarterly installment structure',
    category: 'taxes',
    vendor: 'City of Montreal - Tax Department',
    paymentType: 'recurrent',
    schedulePayment: 'quarterly',
    scheduleCustom: null,
    costs: ['4800.00', '4800.00', '4800.00', '4800.00'], // Equal quarterly payments
    totalAmount: '19200.00',
    startDate: '2024-01-01',
    endDate: null, // Ongoing for future tax projections
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/taxes/TAX-2024-010.pdf',
    documentName: 'Advanced_Tax_Payment_Plan.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { assessment: '960000', rate: '2.0%', installments: '4', paymentPlan: 'quarterly_advanced' },
    notes: 'Advanced quarterly tax payments: $4,800 per quarter. Assessment: $960,000 at 2.0% rate. Future tax years auto-generated with assessment adjustments.',
    createdAt: new Date('2024-02-01'),
    updatedAt: new Date('2024-02-01'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 1 - Administration with Advanced Annual Billing Plan
  {
    id: '11',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'ADM-2024-011',
    title: 'Property Management Software - Enterprise License Plan',
    description: 'Advanced enterprise software license with multi-module access and premium support',
    category: 'administration',
    vendor: 'PropTech Solutions Quebec Elite',
    paymentType: 'recurrent',
    schedulePayment: 'yearly',
    scheduleCustom: null,
    costs: ['2400.00'], // Annual payment
    totalAmount: '2400.00',
    startDate: '2024-01-01',
    endDate: null, // Ongoing for future projections
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/admin/ADM-2024-011.pdf',
    documentName: 'Enterprise_Software_License.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { users: '25', modules: '8', support: 'premium', paymentPlan: 'annual_enterprise' },
    notes: 'Enterprise license: 25 users, 8 modules, premium support. Annual billing with auto-renewal and future bill generation.',
    createdAt: new Date('2024-01-03'),
    updatedAt: new Date('2024-01-03'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - Professional Services with Complex 3-Payment Structure  
  {
    id: '12',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'PROF-2024-012',
    title: 'Legal & Consulting Services - Multi-Phase Contract',
    description: 'Comprehensive legal and consulting services with sophisticated 3-phase payment structure',
    category: 'professional_services',
    vendor: 'Quebec Elite Legal & Consulting Group',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2024-02-15', '2024-05-15', '2024-08-15'],
    costs: ['4000.00', '2500.00', '1500.00'], // Decreasing payments: Initial consultation, mid-term review, final
    totalAmount: '8000.00',
    startDate: '2024-02-01',
    endDate: '2024-09-01',
    status: 'active',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/legal/PROF-2024-012.pdf',
    documentName: 'Legal_Consulting_Multi_Phase.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { phases: '3', consulting: true, legal: true, paymentPlan: 'decreasing_milestone' },
    notes: 'Advanced 3-phase contract: Initial consultation ($4,000), Mid-term review ($2,500), Final deliverables ($1,500). Comprehensive legal and business consulting.',
    createdAt: new Date('2024-02-15'),
    updatedAt: new Date('2024-02-15'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // ======= HISTORICAL BILLS - 2023 =======

  // Demo Building 1 - Insurance 2023 (Completed)
  {
    id: '13',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'INS-2023-001',
    title: 'Annual Building Insurance 2023',
    description: 'Previous year comprehensive building insurance with quarterly payment structure',
    category: 'insurance',
    vendor: 'Quebec Provincial Insurance Corp.',
    paymentType: 'recurrent',
    schedulePayment: 'quarterly',
    scheduleCustom: null,
    costs: ['3200.00', '3200.00', '3200.00', '3200.00'],
    totalAmount: '12800.00',
    startDate: '2023-01-01',
    endDate: '2023-12-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/insurance/INS-2023-001.pdf',
    documentName: 'Building_Insurance_Policy_2023.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { coverage: 'comprehensive', deductible: '5000', premium: '12800', paymentPlan: 'quarterly' },
    notes: 'Completed 2023 insurance contract. Quarterly payments of $3,200 each. Full coverage maintained.',
    createdAt: new Date('2023-01-15'),
    updatedAt: new Date('2023-12-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - Maintenance 2023 (Completed)
  {
    id: '14',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'MAINT-2023-002',
    title: 'Annual Maintenance Contract 2023',
    description: 'Full-year maintenance services with monthly billing cycle',
    category: 'maintenance',
    vendor: 'Montreal Property Services Inc.',
    paymentType: 'recurrent',
    schedulePayment: 'monthly',
    scheduleCustom: null,
    costs: ['1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00', '1100.00'],
    totalAmount: '13200.00',
    startDate: '2023-01-01',
    endDate: '2023-12-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/maintenance/MAINT-2023-002.pdf',
    documentName: 'Maintenance_Contract_2023.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { services: 'comprehensive', coverage: '24/7', technicians: '3', paymentPlan: 'monthly' },
    notes: 'Completed 2023 maintenance contract. Monthly payments of $1,100. All services delivered successfully.',
    createdAt: new Date('2023-01-10'),
    updatedAt: new Date('2023-12-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 1 - Utilities 2023 (Completed)
  {
    id: '15',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'UTIL-2023-003',
    title: 'Hydro-Quebec Services 2023',
    description: 'Annual utility services with monthly billing and seasonal variations',
    category: 'utilities',
    vendor: 'Hydro-Quebec',
    paymentType: 'recurrent',
    schedulePayment: 'monthly',
    scheduleCustom: null,
    costs: ['920.00', '890.00', '780.00', '650.00', '520.00', '480.00', '450.00', '480.00', '580.00', '720.00', '850.00', '920.00'], // Seasonal variation
    totalAmount: '8250.00',
    startDate: '2023-01-01',
    endDate: '2023-12-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/utilities/UTIL-2023-003.pdf',
    documentName: 'Hydro_Annual_Summary_2023.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { consumption: 'seasonal', peak_demand: '42kW', rate: 'commercial', paymentPlan: 'monthly_seasonal' },
    notes: 'Completed 2023 utility payments. Seasonal variations: Winter highs ($920), Summer lows ($450). All bills paid on time.',
    createdAt: new Date('2023-01-25'),
    updatedAt: new Date('2023-12-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - Major Repair 2023 (Completed)
  {
    id: '16',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'REP-2023-004',
    title: 'Elevator Modernization Project 2023',
    description: 'Complete elevator system upgrade with 4-phase payment structure',
    category: 'repairs',
    vendor: 'Quebec Elevator Technologies',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2023-03-01', '2023-06-01', '2023-09-01', '2023-11-01'],
    costs: ['15000.00', '20000.00', '18000.00', '12000.00'],
    totalAmount: '65000.00',
    startDate: '2023-02-01',
    endDate: '2023-11-30',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/repairs/REP-2023-004.pdf',
    documentName: 'Elevator_Modernization_2023.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { project: 'elevator_modernization', phases: '4', timeline: '9_months', paymentPlan: 'milestone_based' },
    notes: 'Completed elevator modernization: Planning ($15k), Installation ($20k), Testing ($18k), Final ($12k). Project finished successfully.',
    createdAt: new Date('2023-02-15'),
    updatedAt: new Date('2023-11-30'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // ======= HISTORICAL BILLS - 2022 =======

  // Demo Building 1 - Insurance 2022 (Completed)
  {
    id: '17',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'INS-2022-001',
    title: 'Annual Building Insurance 2022',
    description: 'Building insurance coverage for 2022 with semi-annual payment plan',
    category: 'insurance',
    vendor: 'Quebec Provincial Insurance Corp.',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2022-01-15', '2022-07-15'],
    costs: ['6000.00', '6000.00'],
    totalAmount: '12000.00',
    startDate: '2022-01-01',
    endDate: '2022-12-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/insurance/INS-2022-001.pdf',
    documentName: 'Building_Insurance_Policy_2022.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { coverage: 'standard', deductible: '5000', premium: '12000', paymentPlan: 'semi_annual' },
    notes: 'Completed 2022 insurance. Semi-annual payments: $6,000 in January and July. Standard coverage maintained.',
    createdAt: new Date('2022-01-10'),
    updatedAt: new Date('2022-12-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - HVAC Upgrade 2022 (Completed)
  {
    id: '18',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'HVAC-2022-002',
    title: 'HVAC System Upgrade 2022',
    description: 'Complete HVAC system replacement with 3-payment milestone structure',
    category: 'maintenance',
    vendor: 'Montreal HVAC Specialists',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2022-05-01', '2022-08-01', '2022-10-01'],
    costs: ['25000.00', '30000.00', '20000.00'],
    totalAmount: '75000.00',
    startDate: '2022-04-01',
    endDate: '2022-10-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/hvac/HVAC-2022-002.pdf',
    documentName: 'HVAC_Upgrade_Project_2022.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { project: 'hvac_replacement', phases: '3', timeline: '6_months', paymentPlan: 'milestone_progressive' },
    notes: 'Completed HVAC upgrade: Down payment ($25k), Major installation ($30k), Final completion ($20k). System operational since November 2022.',
    createdAt: new Date('2022-04-15'),
    updatedAt: new Date('2022-10-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // Demo Building 1 - Security System 2022 (Completed)
  {
    id: '19',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'SEC-2022-003',
    title: 'Security System Installation 2022',
    description: 'Initial security system setup with quarterly maintenance payments',
    category: 'security',
    vendor: 'SecureTech Montreal',
    paymentType: 'recurrent',
    schedulePayment: 'quarterly',
    scheduleCustom: null,
    costs: ['1600.00', '1600.00', '1600.00', '1600.00'],
    totalAmount: '6400.00',
    startDate: '2022-01-01',
    endDate: '2022-12-31',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/security/SEC-2022-003.pdf',
    documentName: 'Security_Installation_2022.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { cameras: '12', access_points: '6', monitoring: '24/7', paymentPlan: 'quarterly' },
    notes: 'Completed 2022 security installation and service. Quarterly payments of $1,600. System fully operational by Q2.',
    createdAt: new Date('2022-01-05'),
    updatedAt: new Date('2022-12-31'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 1'
  },

  // Demo Building 2 - Landscaping 2022 (Completed)
  {
    id: '20',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'LAND-2022-004',
    title: 'Landscaping Services 2022',
    description: 'Annual landscaping and grounds maintenance with seasonal payment schedule',
    category: 'landscaping',
    vendor: 'Montreal Seasonal Services',
    paymentType: 'recurrent',
    schedulePayment: 'custom',
    scheduleCustom: ['2022-04-01', '2022-07-01', '2022-10-01'],
    costs: ['2000.00', '1500.00', '2500.00'], // Spring setup, Summer maintenance, Fall/Winter
    totalAmount: '6000.00',
    startDate: '2022-04-01',
    endDate: '2022-11-30',
    status: 'paid',
    autoGenerated: false,
    reference: null,
    documentPath: '/documents/landscaping/LAND-2022-004.pdf',
    documentName: 'Landscaping_Services_2022.pdf',
    isAiAnalyzed: true,
    aiAnalysisData: { seasons: '3', snow_removal: true, lawn_area: '2000sqm', paymentPlan: 'seasonal' },
    notes: 'Completed 2022 landscaping: Spring setup ($2k), Summer maintenance ($1.5k), Fall cleanup + winter prep ($2.5k).',
    createdAt: new Date('2022-03-20'),
    updatedAt: new Date('2022-11-30'),
    createdBy: 'demo-user-123',
    buildingName: 'Demo Building 2'
  },

  // ======= AUTO-GENERATED FUTURE BILLS - 2025 =======

  // Auto-generated from Insurance Split Payment (Bill ID 1) - First 2025 instance
  {
    id: '21',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'INS-2025-001-G1',
    title: 'Annual Insurance Premium 2025 - Payment 1 of 2 (Auto-Generated)',
    description: 'Auto-generated from: Annual Insurance Premium - Split Payment Plan',
    category: 'insurance',
    vendor: 'Quebec Provincial Insurance Corp.',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['8400.00'], // 60% of $14,000
    totalAmount: '8400.00',
    startDate: '2025-01-01',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '1', // Parent bill ID
    documentPath: '/documents/insurance/INS-2025-001-G1.pdf',
    documentName: 'Auto_Generated_Insurance_2025_P1.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated instance: 60% payment ($8,400) of annual insurance premium. Generated from sophisticated split payment plan.',
    createdAt: new Date('2025-01-01'),
    updatedAt: new Date('2025-01-01'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  },

  // Auto-generated from Insurance Split Payment (Bill ID 1) - Second 2025 instance  
  {
    id: '22',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'INS-2025-001-G2',
    title: 'Annual Insurance Premium 2025 - Payment 2 of 2 (Auto-Generated)',
    description: 'Auto-generated from: Annual Insurance Premium - Split Payment Plan',
    category: 'insurance',
    vendor: 'Quebec Provincial Insurance Corp.',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['5600.00'], // 40% of $14,000
    totalAmount: '5600.00',
    startDate: '2025-07-01', // 6 months later
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '1', // Parent bill ID
    documentPath: '/documents/insurance/INS-2025-001-G2.pdf',
    documentName: 'Auto_Generated_Insurance_2025_P2.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated instance: 40% payment ($5,600) of annual insurance premium. Deferred 6 months from first payment.',
    createdAt: new Date('2025-01-01'),
    updatedAt: new Date('2025-01-01'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  },

  // ======= AUTO-GENERATED FUTURE BILLS - 2026 =======

  // Auto-generated from Maintenance Monthly (Bill ID 2) - Sample 2026 instances
  {
    id: '23',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'MAINT-2026-001-G1',
    title: 'Annual Maintenance January 2026 (Auto-Generated)',
    description: 'Auto-generated from: Annual Maintenance - Monthly Installment Plan',
    category: 'maintenance',
    vendor: 'Montreal Property Services Inc.',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['1300.00'], // Higher winter cost
    totalAmount: '1300.00',
    startDate: '2026-01-01',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '2',
    documentPath: '/documents/maintenance/MAINT-2026-001-G1.pdf',
    documentName: 'Auto_Generated_Maintenance_2026_Jan.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated monthly maintenance payment. Winter season - higher costs for heating system maintenance.',
    createdAt: new Date('2025-12-01'),
    updatedAt: new Date('2025-12-01'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  },

  // Auto-generated from Utilities Quarterly (Bill ID 3) - 2026 Winter
  {
    id: '24',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'UTIL-2026-Q1-G1',
    title: 'Hydro-Quebec Q1 2026 Winter Peak (Auto-Generated)',
    description: 'Auto-generated from: Hydro-Quebec - Seasonal Variable Rates',
    category: 'utilities',
    vendor: 'Hydro-Quebec',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['1200.00'], // Winter peak rate
    totalAmount: '1200.00',
    startDate: '2026-01-01',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '3',
    documentPath: '/documents/utilities/UTIL-2026-Q1-G1.pdf',
    documentName: 'Auto_Generated_Hydro_2026_Q1.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated quarterly utility bill. Winter peak season with maximum heating demand.',
    createdAt: new Date('2025-12-15'),
    updatedAt: new Date('2025-12-15'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  },

  // ======= AUTO-GENERATED FUTURE BILLS - 2027 =======

  // Auto-generated from Security Escalating (Bill ID 5) - 2027 Q1
  {
    id: '25',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'SEC-2027-Q1-G1',
    title: 'Advanced Security Q1 2027 - Escalated Rate (Auto-Generated)',
    description: 'Auto-generated from: Advanced Security System - Escalating Service Plan',
    category: 'security',
    vendor: 'SecureTech Montreal',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['2205.00'], // 5% escalation from 2026
    totalAmount: '2205.00',
    startDate: '2027-01-01',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '5',
    documentPath: '/documents/security/SEC-2027-Q1-G1.pdf',
    documentName: 'Auto_Generated_Security_2027_Q1.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated quarterly security payment with 5% escalation. Enhanced service features added.',
    createdAt: new Date('2026-12-01'),
    updatedAt: new Date('2026-12-01'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  },

  // ======= AUTO-GENERATED FUTURE BILLS - 2028 =======

  // Auto-generated from Advanced Payroll (Bill ID 6) - 2028 January
  {
    id: '26',
    buildingId: '58895d94-884b-4e8a-9d3a-7bdb52b38f14',
    billNumber: 'SAL-2028-001-G1',
    title: 'Building Payroll January 2028 (Auto-Generated)',
    description: 'Auto-generated from: Building Management Payroll - Advanced Split Structure',
    category: 'salary',
    vendor: 'Quebec Payroll Solutions Inc.',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['13000.00'], // Monthly payroll amount
    totalAmount: '13000.00',
    startDate: '2028-01-01',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '6',
    documentPath: '/documents/payroll/SAL-2028-001-G1.pdf',
    documentName: 'Auto_Generated_Payroll_2028_Jan.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated monthly payroll for January 2028. Ongoing 25-year projection from advanced payroll structure.',
    createdAt: new Date('2027-12-15'),
    updatedAt: new Date('2027-12-15'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 2'
  },

  // Auto-generated from Tax Quarterly (Bill ID 10) - 2028 Q1
  {
    id: '27',
    buildingId: '5673ef95-3ca3-4bc7-bdf1-9dde8febebe7',
    billNumber: 'TAX-2028-Q1-G1',
    title: 'Municipal Property Taxes Q1 2028 (Auto-Generated)',
    description: 'Auto-generated from: Municipal Property Taxes - Advanced Payment Schedule',
    category: 'taxes',
    vendor: 'City of Montreal - Tax Department',
    paymentType: 'unique',
    schedulePayment: null,
    scheduleCustom: null,
    costs: ['4800.00'], // Quarterly tax payment
    totalAmount: '4800.00',
    startDate: '2028-03-31',
    endDate: null,
    status: 'draft',
    autoGenerated: true,
    reference: '10',
    documentPath: '/documents/taxes/TAX-2028-Q1-G1.pdf',
    documentName: 'Auto_Generated_Taxes_2028_Q1.pdf',
    isAiAnalyzed: false,
    aiAnalysisData: null,
    notes: 'Auto-generated quarterly tax payment for Q1 2028. Part of ongoing 25-year tax projection system.',
    createdAt: new Date('2027-12-01'),
    updatedAt: new Date('2027-12-01'),
    createdBy: 'system-auto-generation',
    buildingName: 'Demo Building 1'
  }
];

// Validation schemas
const billFilterSchema = z.object({
  buildingId: z.string().uuid(),
  category: z.string().optional(),
  year: z.string().optional(),
  status: z.enum(['all', 'draft', 'sent', 'overdue', 'paid', 'cancelled']).optional(),
  months: z.string().optional() // Comma-separated month numbers (e.g., "1,3,6,12")
});

const createBillSchema = z.object({
  buildingId: z.string().uuid(),
  title: z.string().min(1),
  description: z.string().optional(),
  category: z.enum([
    'insurance',
    'maintenance', 
    'salary',
    'utilities',
    'cleaning',
    'security',
    'landscaping',
    'professional_services',
    'administration',
    'repairs',
    'supplies',
    'taxes',
    'other'
  ]),
  vendor: z.string().optional(),
  paymentType: z.enum(['unique', 'recurrent']),
  schedulePayment: z.enum(['weekly', 'monthly', 'quarterly', 'yearly', 'custom']).optional(),
  scheduleCustom: z.array(z.string()).optional(),
  costs: z.array(z.number().positive()),
  totalAmount: z.number().positive(),
  startDate: z.string(),
  endDate: z.string().optional(),
  status: z.enum(['draft', 'sent', 'overdue', 'paid', 'cancelled']).optional(),
  notes: z.string().optional()
});

/**
 *
 * @param app
 */
export function registerBillRoutes(app: Express) {
  // Get bills with filtering
  app.get('/api/bills', requireAuth, async (req: any, res: any) => {
    try {
      const filters = billFilterSchema.parse(req.query);
      const user = req.user;
      
      // Check if user has access to the requested building
      const building = await db
        .select({ 
          id: buildings.id,
          name: buildings.name, 
          organizationId: buildings.organizationId 
        })
        .from(buildings)
        .where(eq(buildings.id, filters.buildingId))
        .limit(1);
      
      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found' });
      }
      
      // Role-based access control:
      // - Admin role: can access all buildings
      // - Manager role: can only access buildings from their organizations
      // - Others: no access to bills management
      const canAccessBuilding = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));
      
      if (!canAccessBuilding) {
        return res.status(403).json({ 
          message: 'Access denied to this building',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
      }
      
      const buildingName = building[0].name;
      
      // Query real bills from database
      const query = db
        .select({
          id: bills.id,
          buildingId: bills.buildingId,
          billNumber: bills.billNumber,
          title: bills.title,
          description: bills.description,
          category: bills.category,
          vendor: bills.vendor,
          paymentType: bills.paymentType,
          costs: bills.costs,
          totalAmount: bills.totalAmount,
          startDate: bills.startDate,
          status: bills.status,
          notes: bills.notes,
          createdAt: bills.createdAt,
          updatedAt: bills.updatedAt
        })
        .from(bills)
        .where(eq(bills.buildingId, filters.buildingId));
      
      // Apply additional filters
      const conditions = [eq(bills.buildingId, filters.buildingId)];
      
      if (filters.category && filters.category !== 'all') {
        conditions.push(eq(bills.category, filters.category as any));
      }
      
      if (filters.status && filters.status !== 'all') {
        // Only add status filter if it's a valid enum value
        const validStatuses = ['draft', 'sent', 'overdue', 'paid', 'cancelled'] as const;
        /**
         *
         */
        type ValidStatus = typeof validStatuses[number];
        if (validStatuses.includes(filters.status as ValidStatus)) {
          conditions.push(eq(bills.status, filters.status as ValidStatus));
        }
      }
      
      if (filters.year) {
        conditions.push(sql`EXTRACT(YEAR FROM ${bills.startDate}) = ${filters.year}`);
      }
      
      if (filters.months) {
        // Parse comma-separated month numbers
        const monthNumbers = filters.months.split(',').map(m => parseInt(m.trim(), 10)).filter(m => m >= 1 && m <= 12);
        if (monthNumbers.length > 0) {
          conditions.push(sql`EXTRACT(MONTH FROM ${bills.startDate}) = ANY(${monthNumbers})`);
        }
      }
      
      const result = await db
        .select({
          id: bills.id,
          buildingId: bills.buildingId,
          billNumber: bills.billNumber,
          title: bills.title,
          description: bills.description,
          category: bills.category,
          vendor: bills.vendor,
          paymentType: bills.paymentType,
          costs: bills.costs,
          totalAmount: bills.totalAmount,
          startDate: bills.startDate,
          status: bills.status,
          notes: bills.notes,
          createdAt: bills.createdAt,
          updatedAt: bills.updatedAt
        })
        .from(bills)
        .where(and(...conditions))
        .orderBy(desc(bills.createdAt));
      
      // Add building name to each bill
      const billsWithBuildingName = result.map(bill => ({
        ...bill,
        buildingName
      }));
      
      res.json(billsWithBuildingName);
    } catch (error) {
      console.error('Error fetching bills:', error);
      res.status(400).json({ 
        message: error instanceof z.ZodError ? 'Invalid filters' : 'Failed to fetch bills',
        errors: error instanceof z.ZodError ? error.issues : undefined
      });
    }
  });

  // Get single bill by ID
  app.get('/api/bills/:id', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const bill = mockBills.find(b => b.id === billId);
      
      if (!bill) {
        return res.status(404).json({ message: 'Bill not found' });
      }

      res.json(bill);
    } catch (error) {
      console.error('Error fetching bill:', error);
      res.status(500).json({ message: 'Failed to fetch bill' });
    }
  });

  // Create new bill
  app.post('/api/bills', requireAuth, async (req: any, res: any) => {
    try {
      const data = createBillSchema.parse(req.body);
      const user = req.user;
      
      // Check if user has access to create bills for this building
      const building = await db
        .select({ 
          id: buildings.id,
          organizationId: buildings.organizationId 
        })
        .from(buildings)
        .where(eq(buildings.id, data.buildingId))
        .limit(1);
      
      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found' });
      }
      
      // Role-based access control for bill creation
      const canCreateBill = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));
      
      if (!canCreateBill) {
        return res.status(403).json({ 
          message: 'Access denied to create bills for this building',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
      }
      
      // Generate bill number
      const billNumber = `BILL-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
      
      const newBill = {
        id: Date.now().toString(),
        ...data,
        billNumber,
        costs: data.costs.map(c => c.toString()),
        totalAmount: data.totalAmount.toString(),
        scheduleCustom: data.scheduleCustom || [],
        documentPath: null,
        documentName: null,
        isAiAnalyzed: false,
        aiAnalysisData: null,
        createdAt: new Date(),
        buildingName: 'Mock Building'
      };

      // For now, just return the new bill (in real implementation, this would be saved to database)
      // In the future when bills are actually saved to database, trigger money flow generation:
      // if (data.paymentType === 'recurrent') {
      //   try {
      //     await moneyFlowJob.generateForBill(newBill.id);
      //   } catch (error) {
      //     console.error('Failed to generate money flow for new bill:', error);
      //     // Don't fail the bill creation if money flow generation fails
      //   }
      // }
      
      res.status(201).json(newBill);
    } catch (error) {
      console.error('Error creating bill:', error);
      res.status(400).json({ 
        message: error instanceof z.ZodError ? 'Invalid bill data' : 'Failed to create bill',
        errors: error instanceof z.ZodError ? error.issues : undefined
      });
    }
  });

  // Update bill
  app.put('/api/bills/:id', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const data = createBillSchema.partial().parse(req.body);
      const user = req.user;
      
      const billIndex = mockBills.findIndex(b => b.id === billId);
      if (billIndex === -1) {
        return res.status(404).json({ message: 'Bill not found' });
      }
      
      // Check if user has access to update this bill
      const billBuildingId = mockBills[billIndex].buildingId;
      const building = await db
        .select({ organizationId: buildings.organizationId })
        .from(buildings)
        .where(eq(buildings.id, billBuildingId))
        .limit(1);
      
      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found for this bill' });
      }
      
      // Role-based access control for bill updates
      const canUpdateBill = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));
      
      if (!canUpdateBill) {
        return res.status(403).json({ 
          message: 'Access denied to update this bill',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
      }

      // Update mock bill
      const updatedBill = {
        ...mockBills[billIndex],
        ...data,
        costs: data.costs ? data.costs.map(c => c.toString()) : mockBills[billIndex].costs,
        totalAmount: data.totalAmount ? data.totalAmount.toString() : mockBills[billIndex].totalAmount
      };

      // In the future when bills are actually updated in database, trigger money flow regeneration:
      // if (updatedBill.paymentType === 'recurrent') {
      //   try {
      //     await moneyFlowJob.generateForBill(billId);
      //   } catch (error) {
      //     console.error('Failed to regenerate money flow for updated bill:', error);
      //     // Don't fail the bill update if money flow generation fails
      //   }
      // }

      res.json(updatedBill);
    } catch (error) {
      console.error('Error updating bill:', error);
      res.status(400).json({ 
        message: error instanceof z.ZodError ? 'Invalid bill data' : 'Failed to update bill',
        errors: error instanceof z.ZodError ? error.issues : undefined
      });
    }
  });

  // Delete bill
  app.delete('/api/bills/:id', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const user = req.user;
      const billIndex = mockBills.findIndex(b => b.id === billId);
      
      if (billIndex === -1) {
        return res.status(404).json({ message: 'Bill not found' });
      }
      
      // Check if user has access to delete this bill
      const billBuildingId = mockBills[billIndex].buildingId;
      const building = await db
        .select({ organizationId: buildings.organizationId })
        .from(buildings)
        .where(eq(buildings.id, billBuildingId))
        .limit(1);
      
      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found for this bill' });
      }
      
      // Role-based access control for bill deletion
      const canDeleteBill = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));
      
      if (!canDeleteBill) {
        return res.status(403).json({ 
          message: 'Access denied to delete this bill',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
      }

      res.json({ message: 'Bill deleted successfully' });
    } catch (error) {
      console.error('Error deleting bill:', error);
      res.status(500).json({ message: 'Failed to delete bill' });
    }
  });

  // Get bill categories
  app.get('/api/bills/categories', requireAuth, async (req: any, res: any) => {
    const categories = [
      { value: 'insurance', label: 'Insurance' },
      { value: 'maintenance', label: 'Maintenance' },
      { value: 'salary', label: 'Salary' },
      { value: 'utilities', label: 'Utilities' },
      { value: 'cleaning', label: 'Cleaning' },
      { value: 'security', label: 'Security' },
      { value: 'landscaping', label: 'Landscaping' },
      { value: 'professional_services', label: 'Professional Services' },
      { value: 'administration', label: 'Administration' },
      { value: 'repairs', label: 'Repairs' },
      { value: 'supplies', label: 'Supplies' },
      { value: 'taxes', label: 'Taxes' },
      { value: 'other', label: 'Other' }
    ];
    
    res.json(categories);
  });

  // Money flow endpoints - Coming soon
  app.get('/api/money-flows', requireAuth, async (req: any, res: any) => {
    res.status(501).json({ 
      message: 'Money flow tracking coming soon',
      note: 'This feature will be available once the database migration is complete'
    });
  });

  app.post('/api/money-flows', requireAuth, async (req: any, res: any) => {
    res.status(501).json({ 
      message: 'Money flow tracking coming soon',
      note: 'This feature will be available once the database migration is complete'
    });
  });

  // Advanced Bill Generation Endpoints

  /**
   * Generate future bill instances for a recurrent bill
   * POST /api/bills/:id/generate-future
   */
  app.post('/api/bills/:id/generate-future', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const user = req.user;

      // Check if bill exists and user has access
      const billIndex = mockBills.findIndex(b => b.id === billId);
      if (billIndex === -1) {
        return res.status(404).json({ message: 'Bill not found' });
      }

      const bill = mockBills[billIndex];

      // Check building access
      const building = await db
        .select({ organizationId: buildings.organizationId })
        .from(buildings)
        .where(eq(buildings.id, bill.buildingId))
        .limit(1);

      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found for this bill' });
      }

      // Check permissions (Admin/Manager only)
      const canGenerateBills = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));

      if (!canGenerateBills) {
        return res.status(403).json({ 
          message: 'Access denied to generate future bills',
          code: 'INSUFFICIENT_PERMISSIONS'
        });
      }

      // Validate bill is recurrent
      if (bill.paymentType !== 'recurrent') {
        return res.status(400).json({ 
          message: 'Only recurrent bills can generate future instances' 
        });
      }

      // Generate future bills
      const result = await billGenerationService.generateFutureBillInstances(bill as any);

      res.json({
        message: 'Future bills generated successfully',
        billsCreated: result.billsCreated,
        generatedUntil: result.generatedUntil,
        parentBill: {
          id: bill.id,
          title: bill.title,
          paymentType: bill.paymentType,
          schedulePayment: bill.schedulePayment
        }
      });

    } catch (error: any) {
      console.error('Error generating future bills:', error);
      res.status(500).json({ 
        message: 'Failed to generate future bills',
        error: error.message 
      });
    }
  });

  /**
   * Mark a bill as paid with payment confirmation
   * POST /api/bills/:id/mark-paid
   */
  app.post('/api/bills/:id/mark-paid', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const { paymentDate, notes } = req.body;
      const user = req.user;

      // Find bill
      const billIndex = mockBills.findIndex(b => b.id === billId);
      if (billIndex === -1) {
        return res.status(404).json({ message: 'Bill not found' });
      }

      const bill = mockBills[billIndex];
      const building = await db
        .select({ organizationId: buildings.organizationId })
        .from(buildings)
        .where(eq(buildings.id, bill.buildingId))
        .limit(1);

      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found' });
      }

      const canMarkPaid = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        (user.role === 'manager' && user.organizations?.includes(building[0].organizationId));

      if (!canMarkPaid) {
        return res.status(403).json({ 
          message: 'Access denied to mark bill as paid' 
        });
      }

      // Mark bill as paid
      await billGenerationService.markBillAsPaid(billId, paymentDate ? new Date(paymentDate) : undefined);

      // Update mock bill for now
      mockBills[billIndex].status = 'paid';
      if (notes) {
        mockBills[billIndex].notes = notes;
      }

      res.json({
        message: 'Bill marked as paid successfully',
        billId,
        paymentDate: paymentDate || new Date().toISOString(),
        status: 'paid'
      });

    } catch (error: any) {
      console.error('Error marking bill as paid:', error);
      res.status(500).json({ 
        message: 'Failed to mark bill as paid',
        error: error.message 
      });
    }
  });

  /**
   * Get statistics for auto-generated bills from a parent bill
   * GET /api/bills/:id/generated-stats
   */
  app.get('/api/bills/:id/generated-stats', requireAuth, async (req: any, res: any) => {
    try {
      const billId = req.params.id;
      const user = req.user;

      const billIndex = mockBills.findIndex(b => b.id === billId);
      if (billIndex === -1) {
        return res.status(404).json({ message: 'Bill not found' });
      }

      const bill = mockBills[billIndex];
      const building = await db
        .select({ organizationId: buildings.organizationId })
        .from(buildings)
        .where(eq(buildings.id, bill.buildingId))
        .limit(1);

      if (!building[0]) {
        return res.status(404).json({ message: 'Building not found' });
      }

      const hasAccess = 
        user.role === 'admin' || 
        user.canAccessAllOrganizations ||
        user.organizations?.includes(building[0].organizationId);

      if (!hasAccess) {
        return res.status(403).json({ 
          message: 'Access denied to view bill statistics' 
        });
      }

      const stats = await billGenerationService.getGeneratedBillsStats(billId);

      res.json({
        parentBill: {
          id: bill.id,
          title: bill.title,
          paymentType: bill.paymentType,
          schedulePayment: bill.schedulePayment,
          totalAmount: bill.totalAmount
        },
        generatedBills: stats
      });

    } catch (error: any) {
      console.error('Error getting generated bills stats:', error);
      res.status(500).json({ 
        message: 'Failed to get generated bills statistics',
        error: error.message 
      });
    }
  });
}