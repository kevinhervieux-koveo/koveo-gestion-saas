##[debug]Evaluating condition for step: 'Check PR requirements'
##[debug]Evaluating: success()
##[debug]Evaluating success:
##[debug]=> true
##[debug]Result: true
##[debug]Starting: Check PR requirements
##[debug]Loading inputs
##[debug]Evaluating: secrets.GITHUB_TOKEN
##[debug]Evaluating Index:
##[debug]..Evaluating secrets:
##[debug]..=> Object
##[debug]..Evaluating String:
##[debug]..=> 'GITHUB_TOKEN'
##[debug]=> '***'
##[debug]Result: '***'
##[debug]Evaluating: (runner.debug == '1')
##[debug]Evaluating Equal:
##[debug]..Evaluating Index:
##[debug]....Evaluating runner:
##[debug]....=> Object
##[debug]....Evaluating String:
##[debug]....=> 'debug'
##[debug]..=> '1'
##[debug]..Evaluating String:
##[debug]..=> '1'
##[debug]=> true
##[debug]Expanded: ('1' == '1')
##[debug]Result: true
##[debug]Loading env
Run actions/github-script@v7
  with:
    github-token: ***
    script: const { context, github } = require('@actions/github');
  const pr = context.payload.pull_request;
  
  console.log('üîç Checking PR requirements...');
  
  let failures = [];
  let warnings = [];
  
  // Check PR title format
  const titlePattern = /^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+/;
  if (!titlePattern.test(pr.title)) {
    failures.push('‚ùå PR title must follow conventional commit format: `type(scope): description`');
  }
  
  // Check PR description
  if (!pr.body || pr.body.trim().length < 50) {
    failures.push('‚ùå PR description must be at least 50 characters');
  }
  
  // Check for breaking changes
  if (pr.body && pr.body.includes('BREAKING CHANGE')) {
    warnings.push('‚ö†Ô∏è  This PR contains breaking changes - ensure proper communication');
  }
  
  // Check PR size (number of changed files)
  const files = await github.rest.pulls.listFiles({
    owner: context.repo.owner,
    repo: context.repo.repo,
    pull_number: pr.number
  });
  
  if (files.data.length > 20) {
    warnings.push(`‚ö†Ô∏è  Large PR with ${files.data.length} files - consider breaking into smaller PRs`);
  }
  
  // Check for tests in code changes
  const hasCodeChanges = files.data.some(file => 
    file.filename.match(/\.(ts|tsx)$/) && 
    !file.filename.includes('test') && 
    !file.filename.includes('.d.ts') &&
    file.status !== 'removed'
  );
  
  const hasTestChanges = files.data.some(file => 
    file.filename.includes('test') || 
    file.filename.includes('spec')
  );
  
  if (hasCodeChanges && !hasTestChanges) {
    warnings.push('‚ö†Ô∏è  Code changes detected but no test files modified - ensure adequate test coverage');
  }
  
  // Check for database schema changes
  const hasSchemaChanges = files.data.some(file => 
    file.filename.includes('schema.ts') || 
    file.filename.includes('migration')
  );
  
  if (hasSchemaChanges) {
    warnings.push('üîÑ Database schema changes detected - ensure backward compatibility and migration safety');
  }
  
  // Check for security-sensitive files
  const securityFiles = files.data.filter(file =>
    file.filename.includes('auth') ||
    file.filename.includes('security') ||
    file.filename.includes('password') ||
    file.filename.includes('token')
  );
  
  if (securityFiles.length > 0) {
    warnings.push('üîí Security-related changes detected - mandatory security review required');
  }
  
  // Create status comment
  let commentBody = '## üîç Code Review Requirements Check\n\n';
  
  if (failures.length === 0) {
    commentBody += '‚úÖ **All mandatory requirements met**\n\n';
  } else {
    commentBody += '‚ùå **Mandatory requirements not met:**\n';
    failures.forEach(failure => {
      commentBody += `- ${failure}\n`;
    });
    commentBody += '\n';
  }
  
  if (warnings.length > 0) {
    commentBody += '‚ö†Ô∏è  **Warnings and recommendations:**\n';
    warnings.forEach(warning => {
      commentBody += `- ${warning}\n`;
    });
    commentBody += '\n';
  }
  
  commentBody += '### Review Checklist for Reviewers\n\n';
  commentBody += '**Mandatory checks:**\n';
  commentBody += '- [ ] Code follows TypeScript and project conventions\n';
  commentBody += '- [ ] All tests pass and coverage is adequate\n';
  commentBody += '- [ ] Changes are well-documented (JSDoc for public APIs)\n';
  commentBody += '- [ ] No security vulnerabilities introduced\n';
  commentBody += '- [ ] Quebec compliance maintained (bilingual, accessibility)\n';
  commentBody += '- [ ] Database changes are safe and backward-compatible\n\n';
  
  commentBody += '**Additional checks:**\n';
  commentBody += '- [ ] Performance impact considered\n';
  commentBody += '- [ ] Error handling is comprehensive\n';
  commentBody += '- [ ] Code is maintainable and follows SOLID principles\n';
  commentBody += '- [ ] Changes align with project architecture\n\n';
  
  if (hasSchemaChanges) {
    commentBody += '**Database Review Required:**\n';
    commentBody += '- [ ] Migration is safe and tested\n';
    commentBody += '- [ ] Backward compatibility maintained\n';
    commentBody += '- [ ] Data integrity preserved\n\n';
  }
  
  if (securityFiles.length > 0) {
    commentBody += '**Security Review Required:**\n';
    commentBody += '- [ ] Authentication changes are secure\n';
    commentBody += '- [ ] No sensitive data exposed\n';
    commentBody += '- [ ] Proper authorization checks\n';
    commentBody += '- [ ] Quebec Law 25 compliance maintained\n\n';
  }
  
  commentBody += '---\n';
  commentBody += '*This check is automated. All mandatory requirements must be met before merge.*';
  
  // Post comment
  await github.rest.issues.createComment({
    issue_number: pr.number,
    owner: context.repo.owner,
    repo: context.repo.repo,
    body: commentBody
  });
  
  // Set status check
  if (failures.length > 0) {
    console.log('‚ùå PR requirements check failed');
    process.exit(1);
  } else {
    console.log('‚úÖ PR requirements check passed');
  }
    debug: true
    user-agent: actions/github-script
    result-encoding: json
    retries: 0
    retry-exempt-status-codes: 400,401,403,404,422
SyntaxError: Identifier 'context' has already been declared
    at new AsyncFunction (<anonymous>)
Error: Unhandled error: SyntaxError: Identifier 'context' has already been declared
    at callAsyncFunction (/home/runner/work/_actions/actions/github-script/v7/dist/index.js:35424:16)
    at main (/home/runner/work/_actions/actions/github-script/v7/dist/index.js:35522:26)
    at /home/runner/work/_actions/actions/github-script/v7/dist/index.js:35497:1
    at /home/runner/work/_actions/actions/github-script/v7/dist/index.js:35553:3
    at Object.<anonymous> (/home/runner/work/_actions/actions/github-script/v7/dist/index.js:35556:12)
    at Module._compile (node:internal/modules/cjs/loader:1529:14)
    at Module._extensions..js (node:internal/modules/cjs/loader:1613:10)
    at Module.load (node:internal/modules/cjs/loader:1275:32)
    at Module._load (node:internal/modules/cjs/loader:1096:12)
##[debug]Node Action run completed with exit code 1
##[debug]Finishing: Check PR requirements